     /****** header *****/


# pragma once



#include "CoreMinimal.h"
#include "GameFrameWork/Character.h"
#include "BulletHitInterface.h"
#include "Enemy.generated.h"


UCLASS() 
Class Shooter_API AEnemy : public ACharacter, public IBulletHitInterface
{
   GENERATED_BODY() 
   
public:
   // Set default values for this character's properties
   AEnemy();
   
protected:
   // Called when game starts or when spawned
   virtual void BegingPlay() override;
   
   // Spawn Impact particles when hit by bullet
   UPROPERTY(EditAnywhere, BlueprintReadOnly, Category = Combat, meta =(AllowPrivateAccess = "true")) 
   class UParticleSystem* ImpactParticles;
   
   UFUNCTION(BlueprintNativeEvent) 
   void ShowHealthBar();
   void ShowHealthBar_Implementation();
   
   UFUNCTION(BlueprintImplementableEvent) 
   HideHealthBar();
   
   // Sound to when hit by bullet
   UPROPERTY(EditAnywhere, BlueprintReadOnly, Category = Combat, meta =(AllowPrivateAccess = "true")) 
   class USoundCue ImpactSound;
   
   UPROPERTY(VisibleAnywhere, BlueprintReadOnly, Category = Combat, meta =(AllowPrivateAccess = "true")) 
   float Health;
   
   UPROPERTY(EditAnywhere, BlueprintReadOnly, Category = Combat, meta =(AllowPrivateAccess = "true")) 
   float MaxHealth;
   
   UPROPERTY(EditAnywhere, BlueprintReadOnly, Category = Combat, meta =(AllowPrivateAccess = "true"))
   FString HeadBone;
   
   UPROPERTY(EditAnywhere, BlueprintReadOnly, Category = Combat, meta =(AllowPrivateAccess = "true"))
   float HealthBarDisplayTime;
   
   FHitResult HealthBarTimer;
   
public:
   // Called every frame
   virtual void Tick(float DeltaTime) override;
   
   // Called to bind functionality to input
   virtual void SetupPlayerInputComponent(class UInputComponent* PlayerInputComponent) override;
   
   virtual void BulletHit_Implementation(FHitResult HitResult) override;
   
   virtual float TakeDamage(float DamageAmount,
   struct FDamageEvent const& DamageEvent, 
   AController* EventInstigator, AActor* DamageCauser) override;
   
   FORCEINLINE FString GetHeadBone const { return HeadBone; }
};




       /****** Cpp *******/
       
       
#include "Enemy.h"
#include "Kismet/GameplayStatics.h"
#include "Sound/SoundCue.h"
#include "Particles/ParticleSystem.h"


// Sets default value
AEnemy::AEnemy():
Health(100.f),
MaxHealth(100.f), 
HealthBarDisplayTime(4.f)
{
   // Set this character to call tick() every frame. you can turn this off to improve performance
   PrimaryActorTick.bCanEverTick = true;
   
   GetMesh()->SetCollisionResponseToChannel(
   ECollisionChannel::ECC_Visiblity, 
   ECollisionChannel::ECR_Block);
   
}

// Called this when the game starts or when spawned
AEnemy::BeginPlay() 
{
   Super::BeginPlay();
}

// Called every frame
AEnemy::Tick(float DeltaTime) 
{
   Super::Tick(DeltaTime);
}

// Called to bind functionality to input
AEnemy::SetupPlayerInputComponent(UPlayerInputComponent* PlayerInputComponent) 
{
   Super::SetupPlayerInputComponent(PlayerInputComponent);
}

AEnemy::BulletHit_Implementation(FHitResult HitResult)
{
   if(ImpactSound) 
   {
     UGameplayStatics::PlaySound2D(this, ImpactSound, GetActorLocation());
   }
   
   if(ImpactParticles)
   {
     UGameplayStatics::SpawnEmitterAtLocation(GetWorld(), ImpactParticles, HitResult.Location, FRotator(0.f), true);
   }
   ShowHealthBar();
}

float AEnemy::TakeDamage(float DamageAmount, 
FDamageEvent const& DamageEvent,
AController* EventInstigator, AActor* DamageCauser)
{
   if(Health - DamageAmount <= 0.f)
   {
      Health = 0.f;
   }
   else
   {
      Health -= DamageAmount 
   }
   DamageAmount;
}

void AEnemy::ShowHealthBar_Implementation()
{
   GetWorldTimerManager.ClearTimer(HealthBarTimer) ;
   GetWorldTimerManager.SetTime(
   HealthBarTimer, 
   this, 
   &AEnemy::HideHealthBar, 
   HealthBarDisplayTime);
}












