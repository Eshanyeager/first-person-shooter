     /****** header *****/


# pragma once



#include "CoreMinimal.h"
#include "GameFrameWork/Character.h"
#include "BulletHitInterface.h"
#include "Enemy.generated.h"


UCLASS() 
Class Shooter_API AEnemy : public ACharacter, public IBulletHitInterface
{
   GENERATED_BODY() 
   
public:
   // Set default values for this character's properties
   AEnemy();
   
protected:
   // Called when game starts or when spawned
   virtual void BegingPlay() override;
   
   // Spawn Impact particles when hit by bullet
   UPROPERTY(EditAnywhere, BlueprintReadOnly, Category = Combat, meta =(AllowPrivateAccess = "true")) 
   class UParticleSystem* ImpactParticles;
   
   UFUNCTION(BlueprintNativeEvent) 
   void ShowHealthBar();
   void ShowHealthBar_Implementation();
   
   UFUNCTION(BlueprintImplementableEvent) 
   HideHealthBar();
   
   void Die();
   
   void PlayHitMontage(FName Section, float PlayRate = 1.f);
   
   void ResetHitReactTimer();
   
   Void AgroShpereOverlap(UPrimitiveComponent* PrimitiveComponent, 
   AActor* OtherActor, 
   UPrimitiveComponent* OtherComp, 
   int32 OtherBodyIndex, 
   bool bFromSweep, 
   FHitResult& SweepHitResult);
   
   void SetStunned(bool Stunned);
   
   // For attack overlap 
   UFUNCTION(BlueprintCallable) 
   Void AttackShpereOverlap(UPrimitiveComponent* PrimitiveComponent, 
   AActor* OtherActor, 
   UPrimitiveComponent* OtherComp, 
   int32 OtherBodyIndex, 
   bool bFromSweep, 
   FHitResult& SweepHitResult);
   
   UFUNCTION(BlueprintCallable) 
   Void AttackEndShpereOverlap(UPrimitiveComponent* PrimitiveComponent, 
   AActor* OtherActor, 
   UPrimitiveComponent* OtherComp, 
   int32 OtherBodyIndex,);
   
   UFUNCTION(BlueprintCallable) 
   void PlayAttackMontage(FName Section);
   
   UFUNCTION(BlueprintCallable) 
   FName GetMontageSection();
  
   UFUNCTION()
   Void OnLeftWeaponOverlap(UPrimitiveComponent* PrimitiveComponent, 
   AActor* OtherActor, 
   UPrimitiveComponent* OtherComp, 
   int32 OtherBodyIndex, 
   bool bFromSweep, 
   FHitResult& SweepHitResult);
   
   UFUNCTION() 
   Void OnRightWeaponOverlap(UPrimitiveComponent* PrimitiveComponent, 
   AActor* OtherActor, 
   UPrimitiveComponent* OtherComp, 
   int32 OtherBodyIndex);
   
   // Activate/Deactivate colision for weapon boxes
   UFUNCTION(BlueprintCallable)
   void ActivateLeftWeapon();
   void DeActivateLeftWeapon();
   void ActivateRightWeapon();
   void DeActivateRightWeapon();
   
private:
   
   // Sound to when hit by bullet
   UPROPERTY(EditAnywhere, BlueprintReadOnly, Category = Combat, meta =(AllowPrivateAccess = "true")) 
   class USoundCue ImpactSound;
   
   UPROPERTY(VisibleAnywhere, BlueprintReadOnly, Category = Combat, meta =(AllowPrivateAccess = "true")) 
   float Health;
   
   UPROPERTY(EditAnywhere, BlueprintReadOnly, Category = Combat, meta =(AllowPrivateAccess = "true")) 
   float MaxHealth;
   
   UPROPERTY(EditAnywhere, BlueprintReadOnly, Category = Combat, meta =(AllowPrivateAccess = "true"))
   FString HeadBone;
   
   UPROPERTY(EditAnywhere, BlueprintReadOnly, Category = Combat, meta =(AllowPrivateAccess = "true"))
   float HealthBarDisplayTime;
   
   FTimerHandle HealthBarTimer;
   
   UPROPERTY(EditAnywhere, BlueprintReadOnly, Category = Combat, meta =(AllowPrivateAccess = "true"))
   UAnimMontage* HitMontage;
   
   FTimerHandle HitReactTimer;
   
   UPROPERTY(EditAnywhere, BlueprintReadOnly, Category = Combat, meta =(AllowPrivateAccess = "true"))
   float HitReactMin;
   
   UPROPERTY(EditAnywhere, BlueprintReadOnly, Category = Combat, meta =(AllowPrivateAccess = "true"))
   float HitReactMax;
   
   bool bCanHitReact;
   
   UPROPERTY(BlueprintReadWrite, Category = "AI Behavior", meta = (AllowPrivateAccess = "true")) 
   UBehaviorTree* BehaviorTree;
   
   // Patrol point for enemy to move
   UPROPERTY(BlueprintReadWrite, Category = "AI Behavior", meta = (AllowPrivateAccess = "true", MakeEditWidget = "true")) 
   FVector PatrolPoint;
   
   // Second Patrol point for enemy to move
   UPROPERTY(BlueprintReadWrite, Category = "AI Behavior", meta = (AllowPrivateAccess = "true", MakeEditWidget = "true")) 
   FVector PatrolPoint2;
   
   // Reference to AI controller
   class AEnemyController* EnemyController;
   
   UPROPERTY(EditAnyWhere, BlueprintReadOnly, Category = combat, meta = (AllowPrivateAccess = "true")) 
   class USphereComponent* AgroSphere;
   
   // true when Play hit react montage
   UPROPERTY(VisibleAnywhere, BlueprintReadOnly, Category = Stunned, meta =(AllowPrivateAccess= "true")) 
   bool bStunned;
   
   // Chance of being stunned
   UPROPERTY(EditAnywhere, BlueprintReadOnly, Category = Stunned, meta =(AllowPrivateAccess= "true"))
   float StunChance;
   
   // true when in attack range
   UPROPERTY(VisibleAnywhere, BlueprintReadOnly, Category = Stunned, meta =(AllowPrivateAccess= "true"))
   bool bAttackRange;
   
   // Shpere for attack 
   UPROPERTY(EditAnywhere, BlueprintReadOnly, Category = Stunned, meta =(AllowPrivateAccess= "true"))
   USphereComponent* AttackShpere;
   
   // Enemy attack montage
   UPROPERTY(EditAnywhere, BlueprintReadOnly, Category = "Combat", meta = (AllowPrivateAccess ="true")) 
   UAnimMontage* PlayAttackMontage(FName Section, float PlayRate);
   
   // different Attack to play in montage 
   FName AttackL;
   FName AttackR;
   FName AttackLFast;
   FName AttackRFast;
   
   // Collision box volume for enemy weapon
   UPROPERTY(VisibleAnywhere, BlueprintReadOnly, Category = Combat, meta =(AllowPrivateAccess = "true")) 
   class UBoxComponent* LeftWeaponCollision;
   
   UPROPERTY(VisibleAnywhere, BlueprintReadOnly, Category = Combat, meta =(AllowPrivateAccess = "true"))
   UBoxComponent* RightWeaponCollision;
   
   
public:
   // Called every frame
   virtual void Tick(float DeltaTime) override;
   
   // Called to bind functionality to input
   virtual void SetupPlayerInputComponent(class UInputComponent* PlayerInputComponent) override;
   
   virtual void BulletHit_Implementation(FHitResult HitResult) override;
   
   virtual float TakeDamage(float DamageAmount,
   struct FDamageEvent const& DamageEvent, 
   AController* EventInstigator, AActor* DamageCauser) override;
   
   FORCEINLINE FString GetHeadBone const { return HeadBone; }
   FORCEINLINE UBehaviorTree* GetBehaviorTree() const { return BehaviorTree; }
};




       /****** Cpp *******/
       
       
#include "Enemy.h"
#include "Kismet/GameplayStatics.h"
#include "Sound/SoundCue.h"
#include "Particles/ParticleSystem.h"
#include "Kismet/KismetMathLibrary.h"
#include "BehaviorTree/BlackBoardComponent.h"
#include "EnemyController.h"
#include "Components/CapsuleComponent.h"


// Sets default value
AEnemy::AEnemy():
Health(100.f),
MaxHealth(100.f), 
HealthBarDisplayTime(4.f), 
HitReactMin(.5f),
HitReactMax(1.f),
bCanHitReact(true), 
StunChance(0.5f)
{
   // Set this character to call tick() every frame. you can turn this off to improve performance
   PrimaryActorTick.bCanEverTick = true;
   
   // Construct agro shpere
   AgroShpere = CreateDefaultSubobject<USphereComponent>(TEXT("Agro Shpere));
   AgroShpere->SetupAttachment(GetRootComponent);
   
   // Contstruct attack sphere
   AttackShpere = CreateDefaultSubobject<USphereComponent>(TEXT("Attack Shpere));
   AttackShpere->SetupAttachment(GetRootComponent);
   
   // Construct left and right weapon collision box
   LeftWeaponCollision = CreateDefaultSubobject<UBoxComponent>(TEXT("LeftWeaponBox"));
   LeftWeaponCollision->SetupAttachment(GetMesh(), FName("LeftWeaponBone");
   
   RightWeaponCollision = CreateDefaultSubobject<UBoxComponent>(TEXT("RightWeaponBox"));
   RightWeaponCollision->SetupAttachment(GetMesh(), FName("RightWeaponBone");
}

// Called this when the game starts or when spawned
AEnemy::BeginPlay() 
{
   Super::BeginPlay();
   
   AgroSphere->OnComponentBeginOverlap.AddDynamic(this, &AEnemy::AgroShpereOverlap);
   AttackShpere->OnComponentBeginOverlap.AddDynamic(this, &AEnemy::AttackShpereOverlap);
   AttackShpere->OnComponentEndOverlap.AddDynamic(this, &AEnemy::AttackEndShpereOverlap);
   LeftWeaponCollision->OnComponentBeginOverlap.AddDynamic(this, &AEnemy::OnLeftWeaponOverlap);
   RightWeaponCollision->OnComponentBeginOverlap.AddDynamic(this, &AEnemy::OnRightWeaponOverlap);
   
   GetMesh()->SetCollisionResponseToChannel(
   ECollisionChannel::ECC_Visiblity, 
   ECollisionChannel::ECR_Block);
   
   GetMesh()->SetCollisionResponseToChannel(
   ECollisionChannel::ECC_Camera, 
   ECollisionChannel::ECR_Ignore);
   
   GetCapsuleComponent()->SetCollisionResponseToChannel(
   ECollisionChannel::ECC_Camera, 
   ECollisionChannel::ECR_Ignore);
   
   // Sets collision preset for weapon boxes
   LeftWeaponCollision->SetCollisionEnabled(ECollisionEnabled::NoCollision);
   LeftWeaponCollision->SetCollisionResponseToAllChannel(ECollisionChannel::ECC_Ignore);
   LeftWeaponCollision->SetCollisionResponseToChannel(ECollisionChannel::ECC_Pawn,
   ECollisionResponse::ECR_Overlap);
   LeftWeaponCollision->SetCollisionObjectType(ECollisionChannel::ECC_WorldDynamic);
   
   LeftWeaponCollision->SetCollisionEnabled(ECollisionEnabled::NoCollision);
   LeftWeaponCollision->SetCollisionResponseToAllChannel(ECollisionChannel::ECC_Ignore);
   LeftWeaponCollision->SetCollisionResponseToChannel(ECollisionChannel::ECC_Pawn,
   ECollisionResponse::ECR_Overlap);
   LeftWeaponCollision->SetCollisionObjectType(ECollisionChannel::ECC_WorldDynamic);
  
   // Get Controller
   EnemyController = Cast<AEnemyController>(GetController());
   
   FVector WorldPatrolPoint = UKismetMathLibrary::TransformLoaction(
   GetActorTransform(), WorldPatrolPoint);
   
   FVector WorldPatrolPoint2 = UKismetMathLibrary::TransformLoaction(
   GetActorTransform(), WorldPatrolPoint2);
   
   if(EnemyController)
   {
      EnemyController->GetBlackBoardComponent->SetValueAsVector(TEXT("PatrolPoint"), WorldPatrolPoint);
      EnemyController->GetBlackBoardComponent->SetValueAsVector(TEXT("PatrolPoint2"), WorldPatrolPoint2);
      EnemyController->RunBehaviorTree(BehaviorTree);
   }
}

void AEnemy::SetStunned(bool Stunned) 
{
   bStunned = Stunned;
   if(EnemyController) 
   {
      EnemyController->GetBlackBoardComponent()->SetValueAsBool(TEXT("IsStunned")); 
   }
}

// Called every frame
AEnemy::Tick(float DeltaTime) 
{
   Super::Tick(DeltaTime);
}

// Called to bind functionality to input
AEnemy::SetupPlayerInputComponent(UPlayerInputComponent* PlayerInputComponent) 
{
   Super::SetupPlayerInputComponent(PlayerInputComponent);
}

AEnemy::BulletHit_Implementation(FHitResult HitResult)
{
   if(ImpactSound) 
   {
     UGameplayStatics::PlaySound2D(this, ImpactSound, GetActorLocation());
   }
   
   if(ImpactParticles)
   {
     UGameplayStatics::SpawnEmitterAtLocation(GetWorld(), ImpactParticles, HitResult.Location, FRotator(0.f), true);
   }
   ShowHealthBar();
   // Determine the bullet hit stun
   const float Stunned{ FMath::FRandRange(0.f, 1.f};
   if(Stunned <= StunChance) 
   {
      // Stun the enemy
      PlayHitMontage(FName("HitReactFront"));
      SetStunned(true);
   }
}

float AEnemy::TakeDamage(float DamageAmount, 
FDamageEvent const& DamageEvent,
AController* EventInstigator, AActor* DamageCauser)
{
   if(Health - DamageAmount <= 0.f)
   {
      Health = 0.f;
      Die();
   }
   else
   {
      Health -= DamageAmount 
   }
   DamageAmount;
}

void AEnemy::ShowHealthBar_Implementation()
{
   GetWorldTimerManager.ClearTimer(HealthBarTimer) ;
   GetWorldTimerManager.SetTime(
   HealthBarTimer, 
   this, 
   &AEnemy::HideHealthBar, 
   HealthBarDisplayTime);
}

void AEnemy::Die() 
{
   HideHealthBar();
}

void AEnemy::PlayHitMontage(FName Section, float PlayRate) 
{
  UAnimInstance* AnimInstance = GetMesh()->GetAnimInstance();
  if(AnimInstance) 
  {
     AnimInstance->Montage_Play(HitMontage, PlayRate);
     AnimInstance->Montage_JumpToSection(Section, HitMontage);
  }
  bCanHitReact = false;
  const float HitReactTime{ FMath::FRandRange(HitReactMin, HitReactMax};
  GetWorldTimerManager.SetTime(HitReactTimer,
  this, 
  &AEnemy::ResetHitReactTimer(), 
  HitReactTime);
  
}

void AEnemy::AgroShpereOverlap(UPrimitiveComponent* OverlapComponent, 
   AActor* OtherActor, UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, 
   bool bFromSweep, FHitResult& SweepResult)
{
   if(OtherActor == nullptr) return;
   
   auto Character = Cast<AShooterCharacter>(OtherActor);
   if(Character)
   {
      EnemyController->GetBlackBoardComponent()->SetValueAsObject(TETX("Target"), Character);
   {
   
}

void AEnemy::AttackShpereOverlap(UPrimitiveComponent* OverlapComponent, AActor* OtherActor, 
UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSeeep, FHitResult& SweepResult) 
{
   if(OtherActor == nullptr) return;
   
   auto Character = Cast<AShooterCharacter>(OtherActor);
   if(Character) 
   {
      bAttackRange = true;
      if(EnemyController)
      {
         EnemyController->GetBlackBoardComponent()->SetValueAsBool(TETX("InAttackRange"), true);
      }
   }
}

void AEnemy::AttackEndShpereOverlap(UPrimitiveComponent* OverlapComponent, AActor* OtherActor, 
UPrimitiveComponent* OtherComp, int32 OtherBodyIndex) 
{
   if(OtherActor == nullptr) return;
   
   auto Character = Cast<AShooterCharacter>(OtherActor);
   if(Character) 
   {
      bAttackRange = false;
      if(EnemyController)
      {
         EnemyController->GetBlackBoardComponent()->SetValueAsBool(TETX("InAttackRange"), false);
      }
   }
}

void AEnemy::PlayAttackMontage(FName Section, float PlayRate) 
{
   UAnimInatance* AnimInstance = GetMesh()->GetAnimInstance();
   if(AnimInstance && AttackMontage) 
   {
      AnimInstance->Montage_Play(AttackMontage);
      AnimInstance->Montage-JumpToSection(AttackMontage, Section);
   }
}

FName AEnemy::GetMontageSection() 
{
   FName SectionName;
   const int32 Section{ FMath::FRandRange(1, 4);
   Switch(Section)
   {
      case 1:
         SectionName = AttackL;
         break;
      case 2:
         SectionName = AttackR;
         break;
      case 3:
         SectionName = AttackLFast;
         break;
      case 4:
         SectionName = AttackRFast;
         break;
   }
   return SectionName;
}

void AEnemy::OnLeftWeaponOverlap(UPrimitiveComponent* OverlapComponent, AActor* OtherActor, 
UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, FHitResult& SweepResult);
{

}

void AEnemy::OnRightWeaponOverlap(UPrimitiveComponent* OverlapComponent, AActor* OtherActor, 
UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, FHitResult& SweepResult);
{

}

void AEnemy::ActivateLeftWeapon()
{
   LeftWeaponCollision->SetCollisionEnabled(ECollisionEnabled::QueryOnly);
}

void AEnemy::DeActivateLeftWeapon()
{
   LeftWeaponCollision->SetCollisionEnabled(ECollisionEnabled::NoCollision);
}

void AEnemy::ActivateRightWeapon()
{
   RightWeaponCollision->SetCollisionEnabled(ECollisionEnabled::QueryOnly);
}

void AEnemy::DeActivateRightWeapon()
{
   RightWeaponCollision->SetCollisionEnabled(ECollisionEnabled::NoCollision);
}









