         /********** Header file *********/

#pragma once


#include "CoreMinimal.h"
#include "Item.h"
#include "AmmoType.h"
#include "Ammo.generated.h"


UCLASS() 
class SHOOTER_API AAmmo : public AItem
{
    GENERATED_BODY()
    
public:
    AAmmo();
    
    virtual void Tick(float DeltaTime) override;

protected:
    virtual void BeginPlay() override;
    
    // Overriding the Set item properties to set the ammo mesh properties
    virtual void SetItemProperties(EItemState State) override;
    
    UPROPERTY(EditAnywhere, BlueprintReadOnly, Category = Sphere, meta = (AllowsPrivateAccess = "true")) 
    void AmmoSphereOverLap(UPrimitiveComponent* OverLappedComponent, 
    AActor* OtherActor, 
    UPrimitiveComponent* OtherComp, 
    int32 OtherBodyIndex, 
    bool bFromSweep, 
    FHitResult& SweepResult); 

private:
    //  mesh for pickup ammo
    UPROPERTY(VisibleAnywhere, BlueprintReadOnly, Category = Ammo, meta = (AllowPrivateAccess = "true")) 
    UStaticMeshComponent* AmmoMesh();
    
    //Overlap shpere for pickingup ammo
    UPROPERTY(EditAnywhere, BlueprintReadOnly, Category = Sphere, meta = (AllowsPrivateAccess = "true")) 
    class USphereComponent* AmmoCollisionShpere;
    
    // Ammo type for ammo
    EAmmoType AmmoType;
    
    // Texture icon for ammowidget
    UTexture2D* AmmoTexture;
  
public:
   ForceInline UStaticMeshComponent* GetAmmoMesh() const {return AmmoMesh;}
   ForceInline EAmmoType GetAmmoType() comst {return AmmoType;} 

};





         /******* Cpp ********/
         
#include "AAmmo.h"
#include "Components/BoxComponent.h"
#include "Components/WidgetComponent.h"
#include "Components/SphereComponent.h"


AAmmo::AAmmo() :

{
    // Construct ammo mesh and setit tothe root comp
    AmmoMesh = CreateDefaultSubobject<UStaticMeshComponent>(TEXT("Ammo Mesh"));
    SetupAttachment(RootComponent);
    
    GetCollisionBox->SetupAttachment(GetRootComponent());
    GetAreaSphere->SetupAttachment(GetRootComponent());
    GetPickupWidget->SetupAttqchment(GetRootComponent());
    
    AmmoCollisionSphere = CreateDefaultSubobject<USphereComponent>(TEXT("Ammo Sphere"));
    AmmoCollisionSphere->SetupAttachment(GetRootComponent);
    AmmoCollisionSphere->SetSphereRadius(50.f);
}

void AAmmo::Tick(float DeltaTime)
{
   Super::Tick(DeltaTime);
   
}

void AAmmo::BeginPlay() 
{
   Super::BeginPlay();
   
   AmmoCollisionSphere->OnComponentBeginOverlap.AddDynamic(this, &Ammo::AmmoSphereOverlap) ;
   
}

void AAmmo::SetItemProperties(EItemState Item)
{ 
   Super::SetItemProperties(State);
   
   switch(State)
     {
       case EItemState::EIS_Pickup:
       
       //Set Item properties
       AmmoMesh->SetSimulatePhysics(false) ;
       AmmoMesh->SetEnableGravity(false);
       AmmoMesh->SetVisibility(true) ;
       AmmoMesh->SetCollisionResponseToAllChannels(
       ECollisionResponse::ECR_Ignore);
       AmmoMesh->SetCollisionEnabled(
       EcollisionEnabled::NoCollision);
       
     
       case EItemState::Equipped:
     
       //Set Item properties
       AmmoMesh->SetSimulatePhysics(false) ;
       AmmoMesh->SetEnableGravity(false);
       AmmoMesh->SetVisibility(true) ;
       AmmoMesh->SetCollisionResponseToAllChannels(
       ECollisionResponse::ECR_Ignore);
       AmmoMesh->SetCollisionEnabled(
       EcollisionEnabled::NoCollision);
       
       
       // Weapon falling state 
       case EItemState::EIS_Falling:
       
       AmmoMesh->SetSimulatePhysics(true);
       AmmoMesh->SetEnableGravity(true) ;
       AmmoMesh->SetCollisionEnabled(ECollisionEnabled::QueryAndPhysicsOnly) ;
       AmmoMesh->SetCollisionResponseToAllChannels(
       ECollisionResponse::ECR_Ignore) ;
       AmmoMesh->SetCollisionResponseToChannel(
       ECollisionChannel::ECC_WorldStatic, 
       ECollisionResponse::ECR_Block) ;
    
       
       case EItemState::EIS_EquipInterping:
       
       // Set item mesh priperties
       AmmoMesh->SetSimulatePhysics(false);
       AmmoMesh->SetEnableGravity(false) ;
       AmmoMesh->SetVisibility(true) ;
       AmmoMesh->SetCollisionResponseToAllChannels(
       ECollisionResponse::ECR_Ignore) ;
       AmmoMesh->SetCollisionEnabled(
       ECollisionEnabled::NoCollision) ;
}

void AAmmo::AmmoSphereOverLap(UPrimitiveComponent* OverLappedComponent, 
    AActor* OtherActor, 
    UPrimitiveComponent* OtherComp, 
    int32 OtherBodyIndex, 
    bool bFromSweep, 
    FHitResult& SweepResult)
    {
       if(OtherActor) 
       {
          auto OverlapCharacter = Cast<AShooterCharacter>(OtherActor);
          if(OverlapCharacter) 
          {  
             StartItemCurve(OverlapCharacter);
             AmmoCollisionSphere->SetCollisionEnable(ECollisionEnable::NoCollision) ;
          }
       }
    }
















