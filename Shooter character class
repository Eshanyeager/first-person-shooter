    /* Header File */

#pragma once

#include "CoreMinimal.h"
#include "GameFramework/Character.h"
#include "ShooterCharacter.generated.h"


UCLASS()
class ShooterCharacterPROJECT_API AShooterCharacter : public ACharacter
{
    GENERATED_BODY()

public:
    // Sets default values for this character's properties
    ShooterCharacter();

protected:
    // Called when the game starts or when spawned
    virtual void BeginPlay() override;

public:
    // Called every frame
    virtual void Tick( float DeltaTime ) override;

    // Called to bind functionality to input
    virtual void SetupPlayerInputComponent(class UInputComponent* PlayerInputComponent) override;

private:
    //camera positioning behind the character
    UProperty(VisibleAnywhere, BluePrintReadOnly, Category = Camera, meta = (AllowPrivateAccess = true)) 
    class USpringArmComponent* CameraBoom;
   
    //Camera That Follows Character
    UProperty(VisibleAnywhere, BluePrintReadOnly, Category = Camera, meta = (AllowPrivateAccess = true)) 
    class UCameraComponent* FollowCamera;
    
    // sound for firing weapon
    UProperty(VisibleAnywhere, BluePrintReadOnly, Category = Combat, meta = (AllowPrivateAccess = true)) 
    class USoundCue* FireSound;
    
    // Spawning Flash At Tip of BarrelSocket
    UProperty(VisibleAnywhere, BluePrintReadOnly, Category = Combat, meta = (AllowPrivateAccess = true)) 
    class UParticleSystem* MuzzleFlash;
    
    // Montage For Firing Weapon
    UProperty(VisibleAnywhere, BluePrintReadOnly, Category = Combat, meta = (AllowPrivateAccess = true) ) 
    class UAnimMontage* FireMontage;
    
    // Spawning impact particles on bullet hit
    UProperty(VisibleAnywhere, BluePrintReadOnly, Category = Combat, meta = (AllowPrivateAccess = true)) 
    class UParticleSystem* ImpactParticles;
    
    // spawning beam trails
    UProperty(VisibleAnywhere, BluePrintReadOnly, Category = Combat, meta = (AllowPrivateAccess = true)
    class UParticleSystem* BeamParticles;
    
Public:
    //returns CameraBoom subobject
    ForceInline USpringArmComponent* GetCameraBoom() const {return CameraBoom;}
    
    //returns FollowCamera Subobject
    ForceInline UCameraComponent* GetFollowCamera() const {return FollowCamera;}
    
    
    // Handles input for moving forward and backward.
    UFUNCTION()
    void MoveForward(float Value);

    // Handles input for moving right and left.
    UFUNCTION()
    void MoveRight(float Value);
    
    // called when fire button is pressed
    void FireButton() ;
    
    bool GetBeamEndLocation(const FVector& MuzzleSocketLocation, FVector& OutBeamLocation) ;
   
};




/* Cpp File  */

#include "ShooterCharacter.h"
#include "GameFrameWork/SpringArmComponent.h"
#include "Camera/CameraComponent.h"
#include "Kismet/GameplayStatics.h"
#include "Sound/SoundCue.h"
#include "Engine/SkeletalMeshSocket.h"
#include "Particles/ParticleSystemComponent.h"



// Sets default values
AShooterCharacter::AShooterCharacter()
{
    // Set this character to call Tick() every frame.  You can turn this off to improve performance if you don't need it.
    PrimaryActorTick.bCanEverTick = true;

    // Create cameraBoom
    CameraBoom = CreateDefaultSubobject<USpringArmComponent>(text("CameraBoom"));
    CameraBoom->SetupAttachment(RootComponent);
    CameraBoom->TargetArmLength = 300.f; // Camera Follows at this distance behind the character
    CameraBoom->bUsePawnControlRotation = true; // rotates the arm based on controller
    CameraBoom->SocketOffset = FVector(0.f, 50.f, 50.f);

    // create FollowCamera
    FollowCamera = CreateDefaultSubobject<UCameraComponent>(text("FollowCamera"))
    FollowCamera->SetupAttachment(CameraBoom, USpringArmComponent::SocketName);
    FollowCamera->bUsePawnControlRotation = false; // camera does not rotate relative to the arm
    
    
    /** Don't Rotate when the Controller Rotates. let the controller only affect the camera */
    bUseControllerRotationPitch = false;
    bUseControllerRotationRoll = false;
    bUseControllerRotationYaw = false;
    
    /** Configure the Character Movement */
    GetcharacterMovement()->bOrientRotationToMovement = false; // character moves in the direction of input
    GetCharacterMovement()->RotationRate = FRotator(0.f, 540.f, 0.f); // rotation at this rate
    GetCharacterMovement()->JumpZVelocity = 300.f;
    GetcharacterMovement()->AirControl = 0.2f;
    
}

// Called when the game starts or when spawned
void AShooterCharacter::BeginPlay()
{
    Super::BeginPlay();

}

// Called every frame
void AShooterCharacter::Tick( float DeltaTime )
{
    Super::Tick( DeltaTime );

}

// Called to bind functionality to input
void AShooterCharacter::SetupPlayerInputComponent(UInputComponent* PlayerInputComponent)
{
    Super::SetupPlayerInputComponent(PlayerInputComponent) ;
    check(PlayerInputComponent);

    // Set up "movement" bindings.
    PlayerInputComponent->BindAxis("MoveForward", this, &AShooterCharacter::MoveForward);
    PlayerInputComponent->BindAxis("MoveRight", this, &AShooterCharacter::MoveRight);
    PlayerInputComponent->BindAction("Jump") , IE-Pressed, this, &ACharacter::Jump) ;
    PlayerInputComponent->BindAction("Jump") , IE_Released, this, &ACharacter::StopJumping) ;
    PlayerInputComponent->BindAction("FireButton") , IE_Pressed, this, &AShooterCharacter::FireButton);
    
}

void AShooterCharacter::MoveForward(float Value)
{
    if((Controller! = nullptr) && (Value! = 0.0f)) 
    {
    // Find Wich Way is Forward
     const FRotator Rotation{Controller->GetControlRotation()};
     const FRotator YawRotation{0,Rotation.Yaw,0};
     
     const FVector Direction{FRotationmatrix{YawRotation}.GetUnitAxis(EAxis::X)};
     AddMovementInput(Direction, Value);
    }
}

void AShooterCharacter::MoveRight(float Value)
{
// Find Wich Way is Right
     const FRotator Rotation{Controller->GetControlRotation()};
     const FRotator YawRotation{0,Rotation.Yaw,0};
     
     const FVector Direction{FRotationmatrix{YawRotation}.GetUnitAxis(EAxis::Y)};
     AddMovementInput(Direction, Value);
}


void AShooterCharacter::FireButton() 
{
    if(FireSound) 
     {
       UGameplayStatics::PlaySound2D(this, FireSound);
     }
     
     const UskeletalMeshSocket* BarrelSocket = GetMesh()->GetSocketByName("BarrelSocket");
     if(BarrelSocket) 
     {
      const FTransform SocketTransform = BarrelSocket->GetSocketTransform(GetMesh());
     }
     if(MuzzleFlash) 
     {
       UGameplayStatics::SpawnEmitterAtLocation(GetWorld(), MuzzleFlash, SocketTransform);
     }
     
     UAnimInstance* AnimInstanace = GetMesh()->GetAnimInstance();
     if(AnimInstanace && FireMontage) 
     {
       AnimInstanace->Montage_Play(FireMontage);
       AnimInstanace->Montage_JumptToSection(FName("StartFire")) ;
     }
     
     FVector BeamEnd;
     bool bBeamEnd = GetBeamEndLocation(SocketTransform.Location(), BeamEnd);
     if(bBeamEnd) 
     {
     // Spawn Impact Particles after updating beam end poin
       UGameplayStatics::SpawnEmitterAtLocation(GetWorld(), Impactparticles, BeamEnd) 
     }
     
     UParticleSystemComponent* Beam = UGameplayStatics::SpawnEmitterAtLocation(GetWorld(), BeamParticles, SocketTransform);
     if(Beam) 
     {
       Beam->SetVectorParameter(FName("Target"), BeamEnd); 
     }  
}


Void AShooterCharacter::GetBeamEndLocation(const FVector& MuzzleSocketLocation, FVector& OutBeamLocation);
{
     //Get Current Size Of Viewport
     FVector2D ViewPortSize;
     if(GEngine && GEngine->GameViewPort) 
     {
      GEngine->GameViewPort->GetViewPortSize(ViewPortSize);
     }
     
     // Get Screen Space Location Of Crosshair
     FVector2D CrosshairLocation(CrosshairLocarion.X/2.f, crosshairLocation.Y/2.f);
     CrosshairLocation.Y -= 50.f;
     FVector crosshairWorldLocation;
     FVector CrosshairWorldDirection;

     // Get World Position and Direction of Crosshair
     bool bScreenToWorld = UGamePlayStatics::DeProjectToWorld(
     UGameplayStatics::GetPlayerController(this, 0), 
     CrosshairLocation, 
     CrosshairWorldPosition, 
     CrosshairWorldDirection);
     
     if(bScreenToWorld)  // was deprojection Successful? 
     {
        FHitResult ScreenTraceHit;
        const FVector Start{CrosshairWorldPosition};
        const FVector End{CrosshairWorlePosition+CrosshairworldDirection*50'000};
      
        // Set Beam End Point To the Line Trace End Point
        OutBeamLocation = End;
      
        // Trace OutWord From Cross Hair Location
        GetWorld->LineTraceSingleByChannel(
        ScreenTraceHit, 
        Start, 
        End, 
        ECollisionChannel::ECC_Visiblity);
        
        if(ScreenTraceHit.bBlockingHit) //was there a trace hit? 
        {
        // Beam End Point Now Is Trace Hit Location
         OutBeamLocation = ScreenTraceHit.Location;
        }
      
        // Perform Second Trace, This Time From The Gun Barrel
         FHitResult WeaponTraceHit;
         const FVECTOR WeaponTraceStart{ MuzzleSocketLocation};
         const FVector WeaponTraceEnd{ OutBeamLocation};
         
         GetWorld()->LineTraceSingleByChannel(
         WeaponTraceHit, 
         WeaponTraceStart, 
         WeaponTraceEnd, 
         ECollisionChannel::ECC_Visibility) ;
         
         
         if(WeaponTraceHit.bBlockingHit)
         {
          OutBeamLocation = WeaponTraceHit.Location; // Object Between Barrel and BeamEndPoint? 
         }     
         return true;
      }
return False;
}






















