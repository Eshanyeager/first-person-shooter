    /* Header File */

#pragma once

#include "CoreMinimal.h"
#include "GameFramework/Character.h"
#include "ShooterCharacter.generated.h"

UENUM(BlueprintType)
class enum ECombatState : Uint8
{
   ECS_Unoccupied UMETA(DisplayName = "Unoccupied"),
   ECS_FireTimerInProgress UMETA(DisplayName = "FireTimerInProgress"),
   ECS_Reloading UMETA(DisplayName = "Reloading"),
   
   ECS_Max UMETA(DisplayName = "DefaultMax"),
};


UCLASS()
class ShooterCharacterPROJECT_API AShooterCharacter : public ACharacter
{
    GENERATED_BODY()

public:
    // Sets default values for this character's properties
    ShooterCharacter();

protected:
    // Called when the game starts or when spawned
    virtual void BeginPlay() override;
    
    // Handles input for moving forward and backward.
    UFUNCTION()
    void MoveForward(float Value);
    
    // Handles input for moving right and left.
    UFUNCTION()
    void MoveRight(float Value);
    
    // called when fire button is pressed
    void FireButton() ;
    
    void FireButtonPresses() ;
    void FireButtonReleased() ;
    
    void StartFireTimer(); 
    
    void CameraInterpZoom(float DeltaTime);
    
    void CalculateCrosshairSpread(float DeltaTime);
    
    // Multiplier Component For Cross hair Spread
    UPROPERTY(VisibleAnywhere, BlueprintReadOnly, Category = "Crosshairs") 
    float CrosshariSpreadMultiplier;
    
    // Aiming When Button Pressed
    void AimingButtonPressed();
    
    // Stop Aiming When Button Released
    void AimningButtonReleased();
    
    void StarCrosshairBulletFire() ;
     
    void FinishCrosshaieBulletFire() ;
 
    void AutoFireReset();
    
    bool GetBeamEndLocation(const FVector& MuzzleSocketLocation, FVector& OutBeamLocation) ;
    
    // Trace Item Under Crosshair
    bool TraceUnderCrosshair(FHitResult& OutHitResult, FVector& OutHitLocation);
    
    // Show Widget when tracing
    void TraceForItems();
    
    // Spawn default weapon and equips it
    Class AWeapon* SpawnDefaultWeapon();
    
    // Takes a weapon and attached to the mesh
    void equipweapon( class AWeapon* WeaponToEquip) ;
    
    // Detach weapon and let it fall on ground
    void DropWeapon() ;
    
    // Buttons for dropping weapon
    void SelectButtonPress() ;
    void SelectButtonRelease() ;
    
    // For Crosshair Spread when Shooting
    void ShootTimeDuration() ;
    
    // Drops currently equipped weapon and equips trace hit item
    void SwapWeapon(AWeapon* WeaponToSwap) ;
    
    // initialize ammo map with ammo values
    void InitializeAmmoMap();
    
    // Check to make sure our weapon has ammo
    bool WeaponHasAmmo();
 
    // Fire Weapon properties
    void PlayFireSound();
    void SendBullets();
    void PlayGunFireMontage();
    
    // button for reloading weapon
    void ReloadButtonPressed();
    
    void ReloadWeapon();
    
    UFUNCTION(BlueprintCallable) 
    void FinishReloading();
    
    // Check to see whether or not carrying ammo
    bool CarryingAmmo();
    
    // Grabs the clip while reloading
    void GrabClip();
    
    // Release the clip while done reloading
    void ReleaseClip();
    
    void CrouchButtonPressed();
    

public:
    // Called every frame
    virtual void Tick( float DeltaTime ) override;

    // Called to bind functionality to input
    virtual void SetupPlayerInputComponent(class UInputComponent* PlayerInputComponent) override;

private:
    //camera positioning behind the character
    UPROPERTY(VisibleAnywhere, BluePrintReadOnly, Category = Camera, meta = (AllowPrivateAccess = true)) 
    class USpringArmComponent* CameraBoom;
   
    //Camera That Follows Character
    UPROPERTY(VisibleAnywhere, BluePrintReadOnly, Category = Camera, meta = (AllowPrivateAccess = true)) 
    class UCameraComponent* FollowCamera;
    
    // sound for firing weapon
    UPROPERTY(VisibleAnywhere, BluePrintReadOnly, Category = Combat, meta = (AllowPrivateAccess = true)) 
    class USoundCue* FireSound;
    
    // Spawning Flash At Tip of BarrelSocket
    UPROPERTY(VisibleAnywhere, BluePrintReadOnly, Category = Combat, meta = (AllowPrivateAccess = true)) 
    class UParticleSystem* MuzzleFlash;
    
    // Montage For Firing Weapon
    UPROPERTY(VisibleAnywhere, BluePrintReadOnly, Category = Combat, meta = (AllowPrivateAccess = true) ) 
    class UAnimMontage* FireMontage;
    
    // Aiming Button for Zooming
    bool bAiming;
    
    // Rate for Automatic Gun Fire
    float AutomaticFireRate;
    
    //Sets Time Between Gunshots
    FTimerHandle AutoFireTimer;
    
    // Velocity component for cross hair spread
    UPROPERTY(VisibleAnywhere, BlueprintReadOnly, Category = "Crosshairs")
    float CrosshairVelocityFactor;
    
    // Is In Air Component for Crosshair spread
    UPROPERTY(VisibleAnywhere, BlueprintReadOnly, Category = "Crosshairs")
    float CrosshairIsInAirFactor;
    
    // Aim Component For Crosshair spread
    UPROPERTY(VisibleAnywhere, BlueprintReadOnly, Category = "Crosshairs")
    float CrosshairAimFactor;
    
    // Shooting Component for Crosshair spread
    UPROPERTY(VisibleAnywhere, BlueprintReadOnly, Category = "Crosshairs")
    float CrosshairShootingFactor;
    
    // true When We can Fire, false When Waiting for timer
    bool bShouldFire;
    
    // Left Mouse Button Pressed
    bool bFireButtonPressed;
    bool bFiringBullet;
    FTimerHandle CrosshairShootTimer;
    
    
    // Spawning impact particles on bullet hit
    UPROPERTY(VisibleAnywhere, BluePrintReadOnly, Category = Combat, meta = (AllowPrivateAccess = true)) 
    class UParticleSystem* ImpactParticles;
    
    // spawning beam trails
    UPROPERTY(VisibleAnywhere, BluePrintReadOnly, Category = Combat, meta = (AllowPrivateAccess = true)) 
    class UParticleSystem* BeamParticles;
    
    // Hide widget when not tracing
    float TraceHitItemLastFrame;
    
    // True if we should trace every frame for item
    bool bShouldTraceForItems;
    
    // No of Overlapped AItems
    int8 OverlappedItemCount;
    
    // Currently Equippes Weapon
    UPROPERTY(VisibleAnywhere, BluePrintReadOnly, Category = Combat, meta = (AllowPrivateAccess = true)) 
    class AWeapon* EquippedWeapon;
    
    // Set this in blueprint for default weapon class
    TSubClassOf<AWeapon> DefaultWeaponClass;
    
    // Item currently hit by our trace in traceforitem
    UPROPERTY(VisibleAnywhere, BluePrintReadOnly, Category = Combat, meta = (AllowPrivateAccess = true)) 
    AItem* TraceHitItem;
    
    /** Distance outward from camera for interp destination */
    UPROPERTY(EditAnywhere, BluePrintReadOnly, Category = Combat, meta = (AllowPrivateAccess = true))
    float CameraInterpDistance;
    
    // Camera set default Field of View value
    float CameraDefaultFov;
    
    // Camera Value for Zoomed FOV
    float CameraZoomedFov;
    
    // Current CameraFov Value
    float CameraCurrentFov;
    
    // Interpolation while Zooming
    float InterpSpeed;
    
    /** Distance upward from the camera for interp destination */
    UPROPERTY(EditAnywhere, BluePrintReadOnly, Category = Combat, meta = (AllowPrivateAccess = true))
    float CameraInterpElevation;
    
    // Map to Keep track of ammo of different mo types
    UPROPERTY(EditAnywhere, BluePrintReadOnly, Category = Combat, meta = (AllowPrivateAccess = true))
    TMap<EAmmoType, int32>  MapAmmo;
    
    // Starting amount of 9mm ammo
    UPROPERTY(EditAnywhere, BluePrintReadOnly, Category = Combat, meta = (AllowPrivateAccess = true))
    int32 Starting9mmAmmo;
    
    // Starting amount of AR ammo
    UPROPERTY(EditAnywhere, BluePrintReadOnly, Category = Combat, meta = (AllowPrivateAccess = true))
    int32 StartingARAmmo;
    
    // Combat State for reload and fire if unoccupied
    UPROPERTY(VisibleAnywhere, BlueprintReadOnly, Category = "Combat", meta = (AllowPrivateAccess = "true"))
    ECombatState CombatState;
    
    UPROPERTY(EditAnywhere, BlueprintReadOnly, Category = "Combat", meta = (AllowPrivateAccess = "true")) 
    UAnimMontage* ReloadMontage;
    
    // Transform of clip when we first grab clip during reloading
    UPROPERTY(VisibleAnywhere, BlueprintReadOnly, Category = "Combat", mera = (AllowPrivateAccess = "true")) 
    FTransForm ClipTransform;
    
    // Scene component attach to character during reload
    USceneComponent* HandSceneComponent;
    
    // true when crouching
    UPROPERTY(VisibleAnywhere, BlueprintReadOnly, Category = Combat, meta = (AllowsPrivateAccess = "true")) 
    bool bCrouching;
    
Public:
    //returns CameraBoom subobject
    ForceInline USpringArmComponent* GetCameraBoom() const {return CameraBoom;}
    
    //returns FollowCamera Subobject
    ForceInline UCameraComponent* GetFollowCamera() const {return FollowCamera;}
    
    ForceInline bool GetAiming() const { return bAiming ;}
    
    UFUNCTION() 
    float GetCrosshairSpreadMultiplier();
    
    ForceInline int8 GetOverlappedItemCount() const {return OverlappedItemCount;}
    
    // Add/Subtracts To/From OverlappedItemCount and Update bShouldTraceForItems//
    void IncrememtOverlappedItemCount(int8 Amount) ;
    
    FVector GetCameraInterpLocation();
    
    void GetPickupItem(AItem* Item);
    
    ForceInline ECombatState GetCombatState() const{return CombatState;}
    
    ForceInline bool GetCrouching() const {return bCrouching;}
};



/***********************/
    /* Cpp File  */
/***********************/ 
    

#include "ShooterCharacter.h"
#include "GameFrameWork/SpringArmComponent.h"
#include "Camera/CameraComponent.h"
#include "Kismet/GameplayStatics.h"
#include "Sound/SoundCue.h"
#include "Engine/SkeletalMeshSocket.h"
#include "Particles/ParticleSystemComponent.h"
#include "Item.h"
#include "Components/BoxComponent.h"
#include "Components/ShpereComponent.h"


// Sets default values
AShooterCharacter::AShooterCharacter() :

// Sets Value for Camera Field Of View
bAiming(false);
CameraDefaultFov(0.f), // Set in BeginPlay
CameraZoomedFov(60.f), 
InterpSpeed(20.f), 
CameraCurrentFov(0.f);

// Crosshair Spread Value
CrosshairSpreadMultiplier(0.f), 
CrosshairVelocityFactor(0.f), 
CrosshairIsInAirFactor(0.f), 
CrosshairAimFactor(0.f), 
CrosshairShootingFactor(0.f);

// Bullet Fire Timer Variables
ShootTimeDuration(0.05f), 
bFiringBullet(false) ;
// Automatic  Gun Fire Rate
AutomaticFireRate(0.1f), 
bShouldFire(true), 
bFireButtonPressed(false),
//  Item Trace Variables
bShouldTraceForItems(false)
// Camera interp locations variable
CameraInterpDistance(250.f);
CameraInterpElevation(65.f);
// Starting Ammo Values
Starting9mmAmmo(85),
StartingARAmmo(100),
// Variables for combat state
CombatState(ECombatState_Unoccupied), 
bCrouching(false)
{
    // Set this character to call Tick() every frame.  You can turn this off to improve performance if you don't need it.
    PrimaryActorTick.bCanEverTick = true;

    // Create cameraBoom
    CameraBoom = CreateDefaultSubobject<USpringArmComponent>(text("CameraBoom"));
    CameraBoom->SetupAttachment(RootComponent);
    CameraBoom->TargetArmLength = 300.f; // Camera Follows at this distance behind the character
    CameraBoom->bUsePawnControlRotation = true; // rotates the arm based on controller
    CameraBoom->SocketOffset = FVector(0.f, 50.f, 50.f);

    // create FollowCamera
    FollowCamera = CreateDefaultSubobject<UCameraComponent>(text("FollowCamera"))
    FollowCamera->SetupAttachment(CameraBoom, USpringArmComponent::SocketName);
    FollowCamera->bUsePawnControlRotation = false; // camera does not rotate relative to the arm
    
    
    /** Don't Rotate when the Controller Rotates. let the controller only affect the camera */
    bUseControllerRotationPitch = false;
    bUseControllerRotationRoll = false;
    bUseControllerRotationYaw = false;
    
    /** Configure the Character Movement */
    GetcharacterMovement()->bOrientRotationToMovement = false; // character moves in the direction of input
    GetCharacterMovement()->RotationRate = FRotator(0.f, 540.f, 0.f); // rotation at this rate
    GetCharacterMovement()->JumpZVelocity = 300.f;
    GetcharacterMovement()->AirControl = 0.2f;
    
    // Create Hand Scene Component
    HandSceneComponent = CreateDefaultSubobject<USceneComponent>(TEXT("HandSceneComp"));
}

// Called when the game starts or when spawned
void AShooterCharacter::BeginPlay()
{
    Super::BeginPlay();
    
    if(FollowCamera) 
    {
      CameraDefaultFov = GetFollowCamera()->FieldOfView;
      CameraCurrentFov = CameraDefaultFov;
      
      // Spawn the default weapon and equip it
      EquipWeapon(SpawnDefaultWeapon());
      
      InitializeAmmoMap();
    }
    
}

void AShooterCharacter::CameraInterpZoom(float DeltaTime)
{
   if(bAiming) 
   {
     CameraCurrentFov = FMath::InterpTo(
     CameraCurrentFov, 
     CameraZoomedFov, 
     DeltaTime, 
     InterSpeed);
   }
   else
   {
    CameraCurrentFov = FMath::InterpTo(
     CameraCurrentFov, 
     CameraDefaultFov, 
     DeltaTime, 
     InterSpeed);
   }
   GetFollowCamera()->SetFieldOfView(CameraDefaultFov);
   
   
}

void AShooterCharacer::TraceForItems() 
{
   if(bShouldTraceForItems) 
   {
     FHitResult ItemTraceReslut;
     FVector HitLocation;
     TraceUnderCrosshair(ItemTraceResult, HitLocation) ;
     if(ItemTraceResult.bBlockingHit) 
       {
         TraceHitItem = Cast<AItem>(ItemTraceResult.Actor);
         if(TraceHitItem && TraceHitItem->GetPickupwidget())
          { 
            //Show Pickup Widget
            TraceHitItem->GetPickUpWidget()->SetVisiblity(true);
          } 
       }
       
       if(TraceHitItem != TraceHitItemLastFrame) 
        {
           
           TraceHitItemLastFrame->GetPickupWidget()->SetVisiblity(false) ;
        }
       // Store a Reference to the HitItem
       TraceHitItemLastFrame = TraceHitItem;
   }
   else if(TraceHitItemLastFrame)
   {
     // Item Last Frame Should Not Show Widget
     TraceHitItemLastFrame->GetPickupWidget()->SetVisiblity(false);
   }

}

AWeapon* AShooterCharacter::SpawnDefaultWeapon() 
{
     // Check for TSubClassOf Variable
     if(DefaultWeaponClass) 
     {
         // Spawn Weapon
         return SpawnActor<AWeapon>(DefaultWeaponClass);
     }  
     return nullptr;
}

void AShooterCharacer::EquipWeapon(AWeapon* WeaponToEquip) 
{
     if(WeaponToEquip) 
        {
     
         // Get The Hand socket
         const USkeletalMeshSocket* HandSocket = GetMesh()->GetSocketByName(
         FName("RighHandSocket"));
         if(HandSocket) 
             {
             // Attach weapon to the hand
             HandSocket->AttachActor(WeaponToEquip, GetMesh()) ;
             }
         EquippedWeapon = WeaponToEquip;
         EquippedWeapon->SetItemState(EItemState::EIS_Equipped) ;
        }   
        
}

void AShooterCharacter::DropWeapon() 
{
    if(EquippedWeapon)
    {
        FDetachmentTransformRules DetachmentTransformRules(EDetachmentRules::KeepWorld, true);
        EquippedWeapon->GetMesh()->DetachFromComponent(DetachmentTransformRules);
        
        EquippedWeapon->SetItemState(EItemState::EIS_Falling) ;
    
}

void AShooterCharacter::ReloadButtonPressed()
{
     ReloadWeapon();
}

void AShooterCharacter::ReloadWeapon()
{
    if(CombatState != ECombatState::ECS_Unoccupied) return;
    if(EquippedWeapon == nullptr) return;
    
    if(CarryingAmmo() && !EquippedWeapon->ClipIsFull)
    {
        CombatState = ECombatState::ECS_Reloading;
        UAnimInstance* AnimInstance = GetMesh()->GetAnimInstance();
        if(AnimInstance && ReloadMontage) 
        {
           AnimInstance->Montage_Play(ReloadMontage);
           AnimInstance->Montage_JumpToSection(EquippedWeapon->GetReloadMontageSection());
        }
    }
}

bool AShooterCharacter::CarryingAmmo() 
{
    if(EquippedWeapon == nullptr) return false;
    
    auto AmmoType = EquippedWeapon->GetAmmoType();
    if(AmmoMap.Contains(AmmoType))
    {
       return AmmoMap[AmmoType] > 0;
    }
}

void AShooterCharacter::FinishReloading() 
{
   // Update Combat state
   CombatState = ECombatState::ECS_Unoccupied;
   
   if(EquippedWeapon == nullptr) return;
   
   const auto AmmoType{ EquippedWeapon->GetAmmoType() };
   
   //Update the ammo map
   if(AmmoMap.Contains[AmmoType]) 
   {
      // Amount of ammo we are carrying
      int32 CarriedAmmo = AmmoMap[AmmoType];
      
      // Space left in magazine
      const int32 MagEmptySpace =
      EquippedWeapon->GetMagazineCapacity() -
      EquippedWeapon->GetAmmoType();
      
      if(MagEmptySpace > CarriedAmmo) 
      {
         // Reload the magazine with all ammo we have
         EquippedWeapon->ReloadAmmo(CarriedAmmo);
         CarriedAmmo = 0;
         AmmoMap.Add(AmmoType, CarriedAmmo);
      }
      else
      {
          // Fill the magazine
          EquippedWeapon->ReloadAmmo(MagEmptySpace);
          CarriedAmmo -= MagEmptySpace;
          AmmoMap(AmmoType, CarriedAmmo);
          
      }
      
   }
}

// Called every frame
void AShooterCharacter::Tick( float DeltaTime )
{
    Super::Tick( DeltaTime );
    
    // Handlee Interpolation for zoom in
    CameraInterpZoom(DeltaTime) ;
    
    // Calculate Crosshair Spread Multiplier
    CalculateCrosshairSpread(DeltaTime) ;
    // Check Overlapped Then Trace For items
    TraceForItems();
    
}

// Called to bind functionality to input
void AShooterCharacter::SetupPlayerInputComponent(UInputComponent* PlayerInputComponent)
{
    Super::SetupPlayerInputComponent(PlayerInputComponent) ;
    check(PlayerInputComponent);

    // Set up "movement" bindings.
    PlayerInputComponent->BindAxis("MoveForward", this, &AShooterCharacter::MoveForward);
    PlayerInputComponent->BindAxis("MoveRight", this, &AShooterCharacter::MoveRight);
    PlayerInputComponent->BindAction("Jump") , IE-Pressed, this, &ACharacter::Jump) ;
    PlayerInputComponent->BindAction("Jump") , IE_Released, this, &ACharacter::StopJumping) ;
    PlayerInputComponent->BindAction("FireButton") , IE_Pressed, this, &AShooterCharacter::FireButtonPressed);
    PlayerInputComponent->BindAction("FireButton") , IE_Released, this, &AShooterCharacter::FireButtonReleased);
    PlayerInputComponent->BindAction("AimingButton") , IE-Pressed, this, &AShooterCharafter::AimingButtonPressed) ;
    PlayerInputComponent->BindAction("AimingButton") , IE_Released, this, &AShooterCharacter::AimingButtonReleased) ;
    PlayerInputComponent->BindAction("SelectButtonPressed") ,
    IE-Pressed, this, &AShooterCharafter::SelectButtonPressed) ;
    PlayerInputComponent->BindAction("SelectButtonReleased") , 
    IE_Released, this, &AShooterCharacter::SelectButtonReleased);
    PlayerInputComponent->BindAction("Reload Button"), IE_Pressed, this, 
    &AShooterCharacter::ReloadButtonPressed);
    PlayerInputComponent->BindAction("CrouchButton"),
    IE-Pressed, this, &AShooterCharafter::CrouchButtonPressed);
}

void AShooterCharacter::MoveForward(float Value)
{
    if((Controller! = nullptr) && (Value! = 0.0f)) 
    {
    // Find Wich Way is Forward
     const FRotator Rotation{Controller->GetControlRotation()};
     const FRotator YawRotation{0,Rotation.Yaw,0};
     
     const FVector Direction{FRotationmatrix{YawRotation}.GetUnitAxis(EAxis::X)};
     AddMovementInput(Direction, Value);
    }
}

void AShooterCharacter::MoveRight(float Value)
{
// Find Wich Way is Right
     const FRotator Rotation{Controller->GetControlRotation()};
     const FRotator YawRotation{0,Rotation.Yaw,0};
     
     const FVector Direction{FRotationmatrix{YawRotation}.GetUnitAxis(EAxis::Y)};
     AddMovementInput(Direction, Value);
}

void AShooterCharacter::PlayFireSound()
{
   // Play fire sound
   if(FireSound) 
     {
       UGameplayStatics::PlaySound2D(this, FireSound);
     }
}

void AShooterCharacter::SendBullets() 
{
     // Send bullets
     const UskeletalMeshSocket* BarrelSocket = EquippedWeapon->GetItemMesh()->GetSocketByName("BarrelSocket");
     if(BarrelSocket) 
     {
      const FTransform SocketTransform = BarrelSocket->GetSocketTransform(EquippedWeapon->GetItemMesh());
     }
     if(MuzzleFlash) 
     {
       UGameplayStatics::SpawnEmitterAtLocation(GetWorld(), MuzzleFlash, SocketTransform);
     }
     
     FVector BeamEnd;
     bool bBeamEnd = GetBeamEndLocation(SocketTransform.Location(), BeamEnd);
     if(bBeamEnd) 
     {
     // Spawn Impact Particles after updating beam end poin
       UGameplayStatics::SpawnEmitterAtLocation(GetWorld(), Impactparticles, BeamEnd) 
     }
     
     UParticleSystemComponent* Beam = UGameplayStatics::SpawnEmitterAtLocation(GetWorld(), BeamParticles, SocketTransform);
     if(Beam) 
     {
       Beam->SetVectorParameter(FName("Target"), BeamEnd); 
     } 
     // Start Bullet Fire Timer For Crosshair 
     StartCrosshairBulletFire() ;
}

void AShooterCharacter::PlayGunFireMontage()
{
    // Play Weapon fire montage
    UAnimInstance* AnimInstanace = GetMesh()->GetAnimInstance();
     if(AnimInstanace && FireMontage) 
     {
       AnimInstanace->Montage_Play(FireMontage);
       AnimInstanace->Montage_JumptToSection(FName("StartFire")) ;
     }
}

void AShooterCharacter::FireButton() 
{
    if(EquippedWeapon == nullptr) return;
    if(CombatState != ECombatState::ECS_Unoccupied) return;
    
    if(WeaponHasAmmo) 
    {
       PlayFireSound();
       SendBullets();
       PlayGunFireMontage();
       // Substaract 1 from from weapon ammo
       EquippedWeapon->DecrementAmmo();
       
       StartFiretimer();
    }   
}

void AShooterCharacter::SelectButtonPressed() 
{
     if(TraceHitItem) 
     {
        TracHitItem->StartItemCurve(this) ;
     }
     if(TraceHitItem->GetPickupSound()) 
     {
        UGameplayStatics::PlaySound2D(this, TraceHitItem->GetPickUpSound());
     }
}
void AShooterCharacter::SelectButtonPressed() 
{
  
}
void AShooterCharacter::SwapWeapon(AWeapon* WeaponToSwap) 
{
     DropWeapon() ;
     EquipWeapon(WeaponToSwap) ;
     TraceHitItem = nullptr;
     TraceHitItemLastFrame = nullptr;
}


Void AShooterCharacter::GetBeamEndLocation(const FVector& MuzzleSocketLocation, FVector& OutBeamLocation);
{
     // Check for Crosshair hit trace
     FHitResult CrosshairHitResult;
     bool bCrosshairHit = TraceUnderCrosshair(CrosshairHitResult, OutBeamLocation) ;
     if(bCrosshairHit) 
     { 
        // Tenative beam location- still need to trace from gun
        OutBeamLocation = CrosshairHitResult.Location;
     }
     else // No Crosshair trace hit
     {
       // OutBeamLocation is the end Location for the line trace
     }
     
     // Perform a second trace this time from gun barrel
     FHitResult WeaponTraceHit;
         const FVECTOR WeaponTraceStart{ MuzzleSocketLocation};
         const FVector StartToEnd { OutBeamLocation - MuzzleSocketLocation };
         const FVector WeaponTraceEnd{ MuzzleSocketLocation + StartToEnd * 1.25f};
         
         GetWorld()->LineTraceSingleByChannel(
         WeaponTraceHit, 
         WeaponTraceStart, 
         WeaponTraceEnd, 
         ECollisionChannel::ECC_Visibility) ;
      
         if(WeaponTraceHit.bBlockingHit)
         {
          OutBeamLocation = WeaponTraceHit.Location; // Object Between Barrel and BeamEndPoint?
          return true;
         }     
   return false;             
}
                 
void AShooterCharacter::AimingbuttonPressed() 
{ 
      bAiming = true;     
}
void AShooterCharacter::AimingbuttonReleased() 
{ 
      bAiming = false;    
}

void AShooterCharacter::GetCrosshairSpreadMultiplier() const
{
   return CrosshairSpreadMultiplier;
}

void AShooterCharacter::CalculateCrosshairSpread(float DeltaTime) 
{
   
   FVector2D WalkSpeedRange{ 0.f, 600.f}
   FVector2D VelocityMultiPlierRange{ 0.f, 1.f};
   FVector Velocity { GetVelocity ()};
   Velocity.Z = 0.f;
   // Calculate Crosshair Velocity Factor
   CrosshairVelocityFactor = Fmath::GetMappedRangeValueClamped(
   WalkSpeedRange,
   VelocityMultiplierRange, 
   Velocity.Size()) ;
   
   // Calculate Crosshair In Air Factor
   if(GetCharacterMovent()->isFalling()) // Is In Air? 
   {
   // Spread Crosshair Slowly In Air
     CrosshairIsInAirFactor = FMath::InterpTo(
     CrosshairIsInAirFactor, 
     2.25f, 
     DeltaTime, 
     2.25f);
   }
   else // Character on Ground
   {
   // Shrink Crosshair on geound
     CrosshairIsInAirFactor = FMath::InterpTo(
     CrosshairIsInAirFactor, 
     0.f, 
     DeltaTime, 
     2.25f);
   }
   
   if(bAiming) // Are We Aiming? 
   {
    // Shrink Crosshair While Aiming
     CrosshairAimFactor = FMath::InterpTo(
     CrosshairAimFactor, 
     0.6f, 
     DeltaTime, 
     30.f);
   }
   else // Not Aiming
   {
     //  Spread Crosshair Back when Not Aiming
     CrosshairAimFactor = FMath::InterpTo(
     CrosshairIsInAirFactor, 
     0.f, 
     DeltaTime, 
     30.f);
   }
  
  
// true 0.05 seconds After Firing Bullet
if(bFiringBullet)
{
  CrosshairShootingFactor = FMath::InterpTo(
  CrosshairShootingFactor, 
  0.3f,
  DeltaTime, 
  60.f);
}
else
{
  CrosshairShootingFactor = FMath::InterpTo(
  CrosshairShootingFactor, 
  0.f,
  DeltaTime, 
  60.f);
}

     
   CrosshairSpreadMultiplier = 
   0.5f + 
   CrosshairVelocityFactor+
   CrosshairIsInAirFactor-
   CrosshairAimFactor+
   CrosshairShootingFactor;
}

void AShooterCharacter::StartCrosshairBulletFire() 
{
   bFiringBullet = true;
   GetWorldTimerManager().SetTimer(
   CrosshairShootTimer, 
   this, 
   &AShooterCharacter::FinishCrosshairBulletFire(), 
   ShootTimeDuration);
}

void AShooterCharacter::FinishCrosshairBulletFire() 
{
   bFiringBullet = false;
}


void AShooterCharacter::FireButtonPressed() 
{
  bFireButtonPressed = true;
  FireWeapon() ;
}

void AShooterCharacter::FireButtonReleased() 
{
  bFireButtonPressed = false;
  
}

void AShooterCharacter::StartFireTimer() 
{
    
     CombatState = ECombatState::ECS_FireTimerInProgress;
     
     GetWorldTimerManager.SetTimer(
     AutoFireTimer, 
     this, 
     &AShooterCharacter::AutoFireReset, 
     AutomaticFireRate) ;
}
void AShooterCharacter::AutoFireReset() 
{
   CombatState = ECombatState::ECS_Unoccupied;
   
   if(WeaponHasAmmo)
   { 
      if(bFireButtonPressed) 
      { 
          FireWeapon();
      }
   }
   else
   {
      // Reload the Weapon
      ReloadWeapon();
   }
}

void AShooterCharacter::TraceUnderCrosshair(FHitResult& OutHitResult, FVecto& OutHitLocation) 
{
// Get view port size 
  FVector2D ViewPortSize;
  if(GEngine && GEngine->GameViewPort) 
  {
    GEngine->GameViewPort->GetViewPortSize(ViewPortSize);
  }
  
  // Get Screen Space Location Of Crosshair
     FVector2D CrosshairLocation(CrosshairLocarion.X/2.f, crosshairLocation.Y/2.f);
     FVector crosshairWorldPosition;
     FVector CrosshairWorldDirection;


   // Get World Position and Direction of Crosshair
     bool bScreenToWorld = UGamePlayStatics::DeProjectToWorld(
     UGameplayStatics::GetPlayerController(this, 0), 
     CrosshairLocation, 
     CrosshairWorldPosition, 
     CrosshairWorldDirection);
    
     if(bScreenToWorld)
     {
       // Trace from crosshair world location outward
       const FVector Start{ CrosshairWorldPosition };
       const FVector End { Start + CrosshairWorldDirection*50'000};
       OutHitLocation = End;
       GetWorld()->LineTraceSingleByChannel(
       OutHitResult, 
       Start, 
       End, 
       ECollisionChannel::ECC_Visiblity);
       
     }
       
      if(OutHitResult.bBlockingHit) 
      {
        OutHitLocation = OutHitResult.Location;
        return true;
      }
  
  
 return false;
}

void AShooterCharacter::IncrementOverlappedItemCount(int8 Amount) 
{
     if(OverlappedItemCount + Amount <=0) 
     {
        OverlappedItemCount = 0;
        bShouldTraceForItem =false;
     }
     else
     {
        OverlappedItemCount += Amount;
        bShouldTraceForItem = true;
     }
}

void AShooterCharacter::GetCameraInterpLocation()
{
    const FVector CameraWorldLoaction{ FolloCamera->GetComponentLocation };
    const FVector CameraForward{ FollowCamera->GetForwardVector() };
    // Desired = CameraWorldLocation + Forward * A + up * 
    return CameraWorldLocation + CameraForward * CameraInterpDistance + 
    FVector(0.f, 0.f, CameraInterpElevation) ;
}

void AShooterCharacter::GetPickupItem(AItem* Item) 
{ 
    if(Item->GetEquippedSound())
    {
       UGameplayStatics::PlaySound2D(this, Item->GetEquippedSound());
    }
    auto Weapon = Cast<AWeapon>(Item);
    if(Weapon) 
    { 
       SwapWeapon(Weapon);
    }   
}

void AShooterCharacter:InitializeAmmoMap()
{
    AmmoMap.Add(EAmmoType::EAT_9mm, Starting9mmAmmo);
    AmmoMap.Add(EAmmoType::EAT_AR, StartingARAmmo);
}

bool AShooterCharacter::WeaponHasAmmo() 
{
    if(EquippedWeapon == nullptr) return;
    
    return EquippedWeapon->GetAmmo() > 0;
}

void AShooterCharacter::GrabClip() 
{
   if(EquippedWeapon == nullptr) return;
   if(HandSceneComponent == nullptr) return;
   
   int32 ClipBoneIndex{ EquippedWeapon->GetItemMesh()->GetBoneIndex(EquippedWeapon->GetClipBoneName())};
   ClipTransform = EquippedWeapon()->GetItemMesh()->GetBoneBoneTransform(ClipBoneIndex);
   
   FAttachmentTransformRules AttachmentRules(EAttachmentRules::KeepRelative, true);
   HandSceneComponent->AttachToComponent(GetMesh(), AttachmentRules, FName("TEXT("Hand_L)));
   HandSceneComponent->SetWorldTransform(ClipTransform);
   
   EquippedWeapon->SetMovingClip(true) ;
}

void AShooterCharacter::ReleaseClip()
{
   EquippedWeapon->SetMovingClip(false);
}

void AShooterCharacter::CrouchButtonPressed() 
{
   if(!GetCharacterMovement()->IsFalling()) 
   {
      bCrouching = !bCrouching;
   }
}





