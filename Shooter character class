    /* Header File */

#pragma once

#include "CoreMinimal.h"
#include "GameFramework/Character.h"
#include "ShooterCharacter.generated.h"

UCLASS()
class FPSPROJECT_API AShooterCharacter : public ACharacter
{
    GENERATED_BODY()

public:
    // Sets default values for this character's properties
    ShooterCharacter();

protected:
    // Called when the game starts or when spawned
    virtual void BeginPlay() override;

public:
    // Called every frame
    virtual void Tick( float DeltaTime ) override;

    // Called to bind functionality to input
    virtual void SetupPlayerInputComponent(class UInputComponent* PlayerInputComponent) override;

private:
    //camera positioning behind the character
    UProperty(VisibleAnywhere, BluePrintReadOnly, Category = Camera, meta = (AllowPrivateAccess = true)) 
    class USpringArmComponent* CameraBoom;
   
    //Camera That Follows Character
    UProperty(VisibleAnywhere, BluePrintReadOnly, Category = Camera, meta = (AllowPrivateAccess = true)
    class UCameraComponent* FollowCamera;
    
Public:
    //returns CameraBoom subobject
    ForceInline USpringArmComponent* GetCameraBoom() const {return CameraBoom;}
    
    //returns FollowCamera Subobject
    ForceInline UCameraComponent* GetFollowCamera() const {return FollowCamera;}
    
    
    // Handles input for moving forward and backward.
    UFUNCTION()
    void MoveForward(float Value);

    // Handles input for moving right and left.
    UFUNCTION()
    void MoveRight(float Value);
   
};




/* Cpp File  */

#include "ShooterCharacter.h"
#include "GameFrameWork/SpringArmComponent.h"
#include "Camera/CameraComponent.h"

// Sets default values
AShooterCharacter::AShooterCharacter()
{
    // Set this character to call Tick() every frame.  You can turn this off to improve performance if you don't need it.
    PrimaryActorTick.bCanEverTick = true;

    // Create cameraBoom
    CameraBoom = CreateDefaultSubobject<USpringArmComponent>(text("CameraBoom"));
    CameraBoom->SetupAttachment(RootComponent);
    CameraBoom->TargetArmLength = 300.f; // Camera Follows at this distance behind the character
    CameraBoom->bUsePawnControlRotation = true; // rotates the arm based on controller

    // create FollowCamera
    FollowCamera = CreateDefaultSubobject<UCameraComponent>(text("FollowCamera"))
    FollowCamera->SetupAttachment(CameraBoom, USpringArmComponent::SocketName);
    FollowCamera->bUsePawnControlRotation = false; // camera does not rotate relative to the arm
    
    
}

// Called when the game starts or when spawned
void AShooterCharacter::BeginPlay()
{
    Super::BeginPlay();

}

// Called every frame
void AShooterCharacter::Tick( float DeltaTime )
{
    Super::Tick( DeltaTime );

}

// Called to bind functionality to input
void AShooterCharacter::SetupPlayerInputComponent(UInputComponent* PlayerInputComponent)
{
    check(PlayerInputComponent);

    // Set up "movement" bindings.
    PlayerInputComponent->BindAxis("MoveForward", this, &AShooterCharacter::MoveForward);
    PlayerInputComponent->BindAxis("MoveRight", this, &AShooterCharacter::MoveRight);
    PlayerInputComponent->BindAction("Jump") , IE-Pressed, this, &ACharacter::Jump) ;
    PlayerInputComponent->BindAction("Jump") , IE_Released, this, &ACharacter::StopJumping) ;
}

void AFPSCharacter::MoveForward(float Value)
{
    if((Controller! = nullptr) && (Value! = 0.0f)) 
    {
     
    }
}

void AFPSCharacter::MoveRight(float Value)
{

}


