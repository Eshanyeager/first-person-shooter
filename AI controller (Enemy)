       /******** header *********/
 
#pragma once

#include "CoreMinimal.h"
#include "AIController.h"
#include "EnemyController.generated.h"

/*
*
*/
UCLASS()
class SHOOTER_API AEnemyController : public AAIController
{
   GENERATED_BODY()
   
 
public:
   AEnemyController();
   
   virtual void OnPossess(APawn* InPawn) override;
   
private:
   // Black board component for this enemy
   UPROPERTY(BlueprintReadOnly, Category = "AI Behavior", meta = (AllowPrivateAccess = "true")) 
   class UBlackBoardComponent* BlackboardComponent;
   
   // Behavior tree component for this enemy
   UPROPERTY(BlueprintReadOnly, Category = "AI Behavior", meta = (AllowPrivateAccess = "true")) 
   class UBehaviorTreeComponent* BehaviorTreeComponent;
   
Public:
   FORCEINLINE UBlackBoardComponent* GetBlackBoardComponent const { return BlackBoardComponent; }
};
       
       
       
      
      
                /****** Cpp*******/
               
      
      
#include "EnemyController.h"


void AEnemyController::AEnemyController()
{
    BlackBoareComponent = CreateDefaultSubobject<UBlackBoardComponent>("BlackBoardComp");
    Check(BlackBoardComponent);
    
    BlackBoareComponent = CreateDefaultSubobject<UBlackBoardComponent>("BlackBoardComp");
    Check(BlackBoardComponent);
}

void AEnemyController::OnPossess(APawn* InPawn) 
{
   Super::OnPossess(InPawn);
   
   if(InPawn == nullptr) return;
   
   AEnemy* Enemy = Cast<AEnemy>(InPawn);
   if(Enemy) 
   {
      BlackboardComponent->InitializeBlackBoard(*(Enemy->GetBehaviorTree()->BlackBoardAsset));
   }
}
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
