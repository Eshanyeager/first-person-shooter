             /***** Header File *****/

# pragma once

#include "CoreMinimal.h"
#include "GameFrameWork/Actor.h
#include " Item.Generated.h"

UENUM(BlueprintType) 
class enum EItemRarity : Uint8
{
  EIR_Common UMETA(DisplayName = "Common"), 
  EIR_UnCommon UMETA(DisplayName = "UnCommon"), 
  EIR_Rare UMETA(DisplayName = "Rare"), 
  EIR_Epic UMETA(DisplayName = "Epic"), 
  EIR_Legendary UMETA(DisplayName = "Legendary"), 
  
  EIR_Max UMETA(DisplayName = " DefaultMsx")
};
// Enum for item state
UENUM(BlueprintType) 
class enum EItemState : Uint8
{
 EIS_Pickup UMETA(DisplayName = "Pickup"), 
 EIS_EquipInterp UMETA(DisplayName =" EquipInterp"), 
 EIS_PickedUp UMETA(DisplayName =" PickedUp"), 
 EIS_Equipped UMETA(DisplayName =" Equipped"), 
 EIS_Falling UMETA(DisplayName =" Falling"), 
 
 EIS_Max UMETA(DisplayName =" DefaultMax")
};


UCLASS() 
class SHOOTER_API AItem : AActor
{
 GENERATED_BODY() 

public:
   // Set's Default Value for this Actor's Properties
   AItem();

protected:
   //Called when the game starts or when spawned
   virtual void BeginPlay() override;
   
   // Called When Overlaped Area
   UFUNCTION() 
   void OnSphereOverlap(UPrimitiveComponent* OverlappedComponent, 
   AActor* OtherActor, 
   UprimitiveComponent* OtherComp, 
   int32 OtherBodyIndex,
   bool bFromSweep, 
   const FHitResult& SweepResult);
   
   // Called When End Overlaped Area
   UFUNCTION() 
   void OnShpereEndOverlap(UprimitiveComponent* OverlappedComponent, 
   AActor* OtherActor, 
   UPrimitiveComponent* OtherComp, 
   int32 OtherBodyIndex);
   
   // Set The Active Stars Array of bools based on rarity
   void SetActiveStars();
   
   // Called when finish interping
   void FinishInterping() ;

public:
   // Called every frame
   virtual void Tick(float DeltaTime) override;

private:
    // Line Trace Collides with Box to show hud Widgets
    UProperty(EditAnywhere, BluePrintReadOnly, Category "Item", mera = (AllowPrivateAccess = "true"))
    class UBoxComponent* CollisionBox;
    
    //Skeletal Mesh for the Item
    UProperty(EditAnywhere, BluePrintReadOnly, Category "Item", mera = (AllowPrivateAccess = "true"))
    class USkeletalMeshComponent* ItemMesh;
    
    // Popup Widget when the player looks at item
    UProperty(EditAnywhere, BluePrintReadOnly, Category "Item", mera = (AllowPrivateAccess = "true"))
    class UWidgetComponent* PickupWidget;
    
    // Show Widget When Overlapped on item
    UProperty(EditAnywhere, BluePrintReadOnly, Category "Item", meta = (AllowPrivateAccess = "true"))
    class UShpereComponent* AreaSphere;
    
    // Name on Item Widget
      UProperty(EditAnywhere, BluePrintReadOnly, Category = "Item", meta = (AllowPrivateAccess = "true")) 
      FString ItemName;
      
      // Shows no count on widget
      int32 ItemCount;
     
      TArray<bool> ActiveStars;
      
      // Item Rarity- Determines The no stars on pickup widget
      UProperty(EidtAnywhere, BlueprintReadOnly, Category = " Item", meta = (AllowPrivateAccess = "true")) 
      EItemRarity ItemRarity;
       
       // State of the Item
      UProperty(EidtAnywhere, BlueprintReadOnly, Category = " Item", meta = (AllowPrivateAccess = "true")) 
      EItemState ItemState;
      // Set Item Properties based on state
      UProperty(EditAnywhere, BlueprintReadOnly, Category = " Item", meta = (AllowPrivateAccess = "true"))
      void SetItemProperties(EItemState State);
      
      // The Curve Asset to use when interping
      UProperty(EditAnywhere, BlueprintReadOnly, Category = " Item", meta = (AllowPrivateAccess = "true"))
      class UCurveFloat* ItemZCurve;
      
      // Starting Location when interping begins
      UProperty(EditAnywhere, BlueprintReadOnly, Category = " Item", meta = (AllowPrivateAccess = "true"))
      FVector ItemStartItnerpLocation;
      
      // target interping location in front of camera
      UProperty(EditAnywhere, BlueprintReadOnly, Category = " Item", meta = (AllowPrivateAccess = "true"))
      FVector CameraTargetLocation;
      
      // true when interping
      bool bInterping;
      
      //plays when we start interping
      FTimerHandle ItemInterpTimer;
      
      // duration of curve and timer
      UProperty(EditAnywhere, BlueprintReadOnly, Category = " Item", meta = (AllowPrivateAccess = "true"))
      float ZCurveTime;
      
      // pointer to the character
      UProperty(VisibleAnywhere, BlueprintReadOnly, Category = " Item", meta = (AllowPrivateAccess = "true"))
      class AShooterCharacter* Character;
      
   
public:
      
      ForceInline UWidgetCompoment* GetPickupItem() const {return PickupItem;}
      ForceInline USphereComponent* GetAreaShpere() const {return AreaShpere;}
      ForceInline UBoxComponent* GetCollisionBox() const {return CollisionBox:}
      ForrceInline EItemState GetItemState() const {return ItemState;}
      void SetItemState(EItemState State);
      ForceInline USkeletalMeshComponent* GetItemMesh() const {return ItemMesh;}
      void StartItemCurve(AShooterCharacter* Char) ;
} 




         /******** Cpp File **********/



#include "Item.h"
#include "Components/BoxComponent.h"
#include "Components/WidgetComponent.h"
#include "Components/ShpereComponentComponent.h"
#include "ShooterCharacter.h"


//Sets Default value
AItem()::AItem():
ItemName(FString("Default"), 
ItemCount(0), 
ItemRarity(EItemRarity::EIR_Common), 
ItemState(EItemState::Pickup),
// Item interp start variable
ZCurveTime(0.7),
ItemInterpStartLocation(FVector(0.f))

{
  // Set this actor to call tick() every frame, you can turn this off to improve performance
  PrimaryActorTick.bCanEverTick = true;
  
   ItemMesh = CreateDefaultSubobject<USkeletalMeshComponent>(TEXT("ItemMesh"));
   SetRootComponent(ItemMesh);
   
   CollisionBox = CreateDefaultSubobject<UBoxComponent>(TEXT("CollisionBox"));
   CollisionBox->SetupAttachment(ItemMesh);
   CollisionBox->SetCollisionResponseToAllChannels(ECollsionResponse::ECR_Ignore); 
   CollisionBox->SetCollisionResponseToChannel(
   ECollisionChannel::ECC_Visiblity, 
   ECollisionResponse::ECR_Block);
  
   PickupWidget = CreateDefaultSubobject<UWidgetComponent>(TEXT("PickupWidget"));
   PickupWidget->SetupAttachment(GetRootComponent());
   
   AreaSphere = CreateDefaultSubobject<USphereComponent>(TEXT("AreaSphere"));
   AreaSphere->SetupAttachment(GetRootComponent());
   
}


//Called When the game starts or when spawned
void AItem::BeginPlay()
{
  Super::BeginPlay();
  
  // Hide Pickup Widget
  if(PickupWidget)
  { 
    PickupWidget->SetVisiblity(false) ;
  }
  
  AreaSphere->OnComponentBeginOverlap.AddDynamic(this, &AItem::OnShpereOverlap);
  AreaSphere->OnComponentEndOverlap.AddDynamic(this, &AItem::OnShpereEndOverlap);
  
  // Sets Active stars array based on rarity
  SetActiveStars();
  
  // Set item properties based on state
  SetItemProperties(ItemState) ;
  
}

void AItem::SetActiveStars()
{
  // 0 Element isn't used
  for(int32 i=0; i<=5; i++) 
  {
    ActiveStars.Add(false);
  }
  Switch(ItemRarity)
  {
    case EItemRarity : EIR_Common:
    ActiveStars[1] = true;
    break;
    
    case EItemRarityEItemRarity::EIR_UnCommon;
    ActiveStars[1] = true;
    ActiveStarts[2] = true;
    break;
    
    case EItemRarity::EIR_Rare;
    ActiveStars[1] = true;
    ActiveStars[2] = true;
    ActiveStars[3] = true;
    break;
    
    case EItemRarity::EIR_Epic;
    ActiveStars[1] = true;
    ActiveStars[2] = true;
    ActiveStars[3] = true;
    ActiveStars[4] = true;
    break;
    
    
    case EItemRarity::EIR_Legendary;
    ActiveStars[1] = true;
    ActiveStars[2] = true;
    ActiveStars[3] = true;
    ActiveStars[4] = true;
    ActiveStars[5] = true;
    break;
  }
  
}

void AItem::SetItemProperties(EItemState State) 
{
     switch(State)
     {
       case EItemState::EIS_Pickup:
       
       //Set Item properties
       ItemMesh->SetSimulatePhysics(false) ;
       ItemMesh->SetEnableGravity(false);
       ItemMesh->SetVisibility(true) ;
       ItemMesh->SetCollisionResponseToAllChannels(
       ECollisionResponse::ECR_Ignore);
       ItemMesh->SetCollisionEnabled(
       EcollisionEnabled::NoCollision);
       
       // Set Areashpere properties
       AreaShpere->SetCollisionResponseToAllChannels(
       ECollisionResponse::ECR_Overlap);
       AreaShpere->SetCollisionEnabled(
       ECollisionEnabled::QueryOnly);
       
       // Set CollisionBox properties
       CollisionBox->SetCollisionResponseToAllChannels(
       ECollisionResponse::ECR_Ignore);
       CollisionBox->SetCollisionResponseToChannel(
       ECollisionChannel::ECC_Visibility,
       ECollisionResponse::ECR_Block);
       CollisionBox->SetCollisionEnabled(
       ECollisionEnabled::QueryAndPhysics);
       break;   
       
       case EItemState::Equipped:
      
       PickupWidget->SetVisibiilty(false); 
       //Set Item properties
       ItemMesh->SetSimulatePhysics(false) ;
       ItemMesh->SetEnableGravity(false);
       ItemMesh->SetVisibility(true) ;
       ItemMesh->SetCollisionResponseToAllChannels(
       ECollisionResponse::ECR_Ignore);
       ItemMesh->SetCollisionEnabled(
       EcollisionEnabled::NoCollision);
       
       // Set Areashpere properties
       AreaShpere->SetCollisionResponseToAllChannels(
       ECollisionResponse::ECR_Ignore);
       AreaShpere->SetCollisionEnabled(
       ECollisionEnabled::NoCollision);
       
       // Set CollisionBox properties
       CollisionBox->SetCollisionResponseToAllChannels(
       ECollisionResponse::ECR_Ignore);
       CollisionBox->SetCollisionEnabled(
       ECollisionEnabledNoCollision);
       break;
       
       // Weapon falling state 
       case EItemState::EIS_Falling:
       
       ItemMesh->SetSimulatePhysics(true);
       ItemMesh->SetEnableGravity(true) ;
       ItemMesh->SetCollisionEnabled(ECollisionEnabled::QueryAndPhysicsOnly) ;
       ItemMesh->SetCollisionResponseToAllChannels(
       ECollisionResponse::ECR_Ignore) ;
       ItemMesh->SetCollisionResponseToChannel(
       ECollisionChannel::ECC_WorldStatic, 
       ECollisionResponse::ECR_Block) ;
       
       // Set Areashpere properties
       AreaShpere->SetCollisionResponseToAllChannels(
       ECollisionResponse::ECR_Ignore);
       AreaShpere->SetCollisionEnabled(
       ECollisionEnabled::NoCollision);
       
       // Set CollisionBox properties
       CollisionBox->SetCollisionResponseToAllChannels(
       ECollisionResponse::ECR_Ignore);
       CollisionBox->SetCollisionEnabled(
       ECollisionEnabled::NoCollision);
       break;
       
       break;
     }
}

void AItem::OnSphereOverlap(UPrimitiveComponent* OverlappedComponent, 
AActor* OtherActor, UPrimitiveComponent* OtherComp, int32 OtherBodyIndex,
bool bFromSweep, const FHitResult& SweepResult) 
{
   if(OtherActor) 
   {
      AShooterCharacter* ShooterCharacter = Cast<AShooterCharacter>(OtherActor);
      if(ShooterCharacter) 
      {
         ShooterCharacter->IncrementOverlappedItemCount(1);
      }
   }
}

void AItem::OnSphereEndOverlap(UPrimitiveComponent* OverlappedComponent, 
AActor* OtherActor, UPrimitiveComponent* OtherComp, int32 OtherBodyIndex) 
{
    if(OtherActor) 
   {
      AShooterCharacter* ShooterCharacter = Cast<AShooterCharacter>(OtherActor);
      if(ShooterCharacter) 
      {
         ShooterCharacter->IncrementOverlappedItemCount(-1);
      }
   }

}


// Called every frame
void AItem::Tick(float DeltaTime) 
{

}

void AItem::SetItemState(EItemState State) 
{
   ItemState = State;
   SetItemProperties(State) ;
}
void AItem::StartItemCurve(AShooterCharacter* Char) 
{
   // Store A handle to the character
   Character = Char;
   
   ItemInterpStartLocation = GetActorLocation() ;
   bInterping = true;
   SetItemState(EItemState::EIS_EquipInterping) ;
   
   GetWorldTimerManager.SetTimer(ItemInterpTimer, 
   this, 
   AItem::FinishInterping, 
   ZCurveTimer) ;
}

void AItem::FinishInterping((
{
   if(Character) 
   {
      Character->GetPickupitem(this); 
   }
}












