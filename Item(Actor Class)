             /***** Header File *****/

# pragma once

#include "CoreMinimal.h"
#include "GameFrameWork/Actor.h
#include " Item.Generated.h"

UCLASS() 
class SHOOTER_API AItem : AActor
{
 GENERATED_BODY() 

public:
   // Set's Default Value for this Actor's Properties
   AItem();

protected:
   //Called when the game starts or when spawned
   virtual void BeginPlay() override;
   
   // Called When Overlaped Area
   UFUNCTION() 
   void OnSphereOverlap(UPrimitiveComponent* OverlappedComponent, 
   AActor* OtherActor, 
   UprimitiveComponent* OtherComp, 
   int32 OtherBodyIndex,
   bool bFromSweep, 
   const FHitResult& SweepResult);
   
   // Called When End Overlaped Area
   UFUNCTION() 
   void OnShpereEndOverlap(UprimitiveComponent* OverlappedComponent, 
   AActor* OtherActor, 
   UPrimitiveComponent* OtherComp, 
   int32 OtherBodyIndex);

public:
   // Called every frame
   virtual void Tick(float DeltaTime) override;

private:
    // Line Trace Collides with Box to show hud Widgets
    UProperty(EditAnywhere, BluePrintReadOnly, Category "Item", mera = (AllowPrivateAccess))
    class UBoxComponent* CollisionBox;
    
    //Skeletal Mesh for the Item
    UProperty(EditAnywhere, BluePrintReadOnly, Category "Item", mera = (AllowPrivateAccess))
    class USkeletalMeshComponent* ItemMesh;
    
    // Popup Widget when the player looks at item
    UProperty(EditAnywhere, BluePrintReadOnly, Category "Item", mera = (AllowPrivateAccess))
    class UWidgetComponent* PickupWidget;
    
    // Show Widget When Overlapped on item
    UProperty(EditAnywhere, BluePrintReadOnly, Category "Item", mera = (AllowPrivateAccess))
    class UShpereComponent* AreaSphere;
   
public:
      
      ForceInline UWidgetCompoment* GetPickupItem() const {return PickupItem};

} 




         /******** Cpp File **********/



#include "Item.h"
#include "Components/BoxComponent.h"
#include "Components/WidgetComponent.h"
#include "Components/ShpereComponentComponent.h"


//Sets Default value
AItem()::AItem()
{
  // Set this actor to call tick() every frame, you can turn this off to improve performance
  PrimaryActorTick.bCanEverTick = true;
  
   ItemMesh = CreateDefaultSubobject<USkeletalMeshComponent>(TEXT("ItemMesh"));
   SetRootComponent(ItemMesh);
   
   CollisionBox = CreateDefaultSubobject<UBoxComponent>(TEXT("CollisionBox"));
   CollisionBox->SetupAttachment(ItemMesh);
   CollisionBox->SetCollisionResponseToAllChannels(ECollsionResponse::ECR_Ignore); 
   CollisionBox->SetCollisionResponseToChannel(
   ECollisionChannel::ECC_Visiblity, 
   ECollisionResponse::ECR_Block);
  
   PickupWidget = CreateDefaultSubobject<UWidgetComponent>(TEXT("PickupWidget"));
   PickupWidget->SetupAttachment(GetRootComponent());
   
   AreaSphere = CIreateDefaultSubobject<USphereComponent>(TEXT("AreaSphere"));
   AreaSphere->SetupAttachment(GetRootComponent());
   
}


//Called When the game starts or when spawned
void AItem::BeginPlay()
{
  Super::BeginPlay();
  
  // Hides widget when we are not looking at it
  PickupWidget->SetVisiblity(false) ;
  
  AreaSphere->OnComponentBeginOverlap.AddDynamic(this, &AItem::OnShpereOverlap);
  AreaSphere->OnComponentEndOverlap.AddDynamic(this, &AItem::OnShpereEndOverlap);
}

void AItem::OnSphereOverlap(UPrimitiveComponent* OverlappedComponent, 
AActor* OtherActor, UPrimitiveComponent* OtherComp, int32 OtherBodyIndex,
bool bFromSweep, const FHitResult& SweepResult) 
{

}

void AItem::OnSphereEndOverlap(UPrimitiveComponent* OverlappedComponent, 
AActor* OtherActor, UPrimitiveComponent* OtherComp, int32 OtherBodyIndex) 
{

}


// Called every frame
void AItem::Tick(float DeltaTime) 
{

}
















