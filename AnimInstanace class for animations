                /* Header File */

#pragma once

#include "CoreMinimal.h"
#include "Animation/AnimInstance.h"
#include "ShooterAnimInstance.generated.h"


UCLASS()
class Shooter_API UShooterAnimInstance : public UAnimInstance
{
  GENERATED_BODY()

};

public:
   UFunction(BluePrintCallable)
   Void UpdateAnimationProperties(float DeltaTime) ;
   
   Virtual Void NativeInitializeAnimation() ;

private:
    UProperty(VisibleAnywhere, BlueprintReadOnly, Categoy = "Movement", meta =(AllowPrivateAccess = true)) 
    class AShooterCharacter* ShooterCharacter;
    
    /* speed of character */
    UProperty(VisibleAnywhere, BlueprintReadOnly, Categoy = "Movement", meta =(AllowPrivateAccess = true))
    float Speed;
    
    /* whether or not character is moving
    UProperty(VisibleAnywhere, BlueprintReadOnly, Categoy = "Movement", meta =(AllowPrivateAccess = true))
    bool bIsAccelerating;
    
    /* whether is in air or not */
    UProperty(VisibleAnywhere, BlueprintReadOnly, Categoy = "Movement", meta =(AllowPrivateAccess = true))
    bool bIsInAir;
    
    // OffsetYaw for Stafing
    UProperty(VisibleAnywhere, BlueprintReadOnly, Categoy = "Movement", meta =(AllowPrivateAccess = true))
    float MovementoffsetYaw;
    
    // OffsetYaw for the frame before we stop moving
    UProperty(VisibleAnywhere, BlueprintReadOnly, Categoy = "Movement", meta =(AllowPrivateAccess = true))
    float LastMovementoffsetYaw;



              /** CPP File  **/
 
 
 
 #include "shooterAnimInstance.h"
 #include "GameFrameWork/CharacterMovementComponent.h"
 
 
 void UShootetAnimInstance::UpdateAnimationProperties(float DeltaTime)
 {
    if(ShooterCharacter == nullptr)
     {
       ShooterCharacter = cast<AShooterCharacter>(TryGetPawnOwner());
     }
   
   
    if(ShooterCharacter) 
    {
       /* get speed of the character from velocity */
       FVector Velocity {ShooterCharacter->GetVelocity()};
       Velocity.z = 0;
       Speed = Velocity.Size();
    
    
       /** is character in the air? */
       bIsInAir = ShooterCharacter->GetCharacterMovement->IsFalling();
    
    
    
       /** is character accelerating? */
       if(ShooterCharacter->GetCharacterMovement()->GetCurrentAcceleration().Size()>0.f) 
        {
           bIsAccelerating = true;
        }
       else
        {
           bIsAccelerating = false;
        }
        
        FRotator AimRotation = Shootercharacter->GetBaseAimRotation();
        
        FRotator MovementRotation = UKismetMathLibrary::MakeRotFromX(ShooterCharacter->GetVelocity()) ;
        
        MovemenoffsetYaw = UKismetMathLibrary::NormalizeDeltaRotator(
        MovementRotation, 
        AimRotation).Yaw;
        
        if(ShootetCharacter->GetVelocity.Size()>0.f) 
        {
         LastMovementoffsetYaw = MovementoffsetYaw;
        }
    }
 
 }

 
 void UShooterAnimInstance::NativeInitializeAnimation() 
 {
  ShooterCharacter = cast<AShooterCharacter>(TryGetPawnOwner());
 }



