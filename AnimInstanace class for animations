                /* Header File */

#pragma once

#include "CoreMinimal.h"
#include "Animation/AnimInstance.h"
#include "ShooterAnimInstance.generated.h"


UCLASS()
class Shooter_API UShooterAnimInstance : public UAnimInstance
{
  GENERATED_BODY()

};

public:
   UShooterAnimInstance();
 
   UFunction(BluePrintCallable)
   Void UpdateAnimationProperties(float DeltaTime) ;
   
   Virtual Void NativeInitializeAnimation() ;
   
protected:  
    // Handles Turn in place variables
    void TurnInPlace();

private:
    UProperty(VisibleAnywhere, BlueprintReadOnly, Categoy = "Movement", meta =(AllowPrivateAccess = true)) 
    class AShooterCharacter* ShooterCharacter;
    
    /* speed of character */
    UProperty(VisibleAnywhere, BlueprintReadOnly, Categoy = "Movement", meta =(AllowPrivateAccess = true))
    float Speed;
    
    /* whether or not character is moving
    UProperty(VisibleAnywhere, BlueprintReadOnly, Categoy = "Movement", meta =(AllowPrivateAccess = true))
    bool bIsAccelerating;
    
    /* whether is in air or not */
    UProperty(VisibleAnywhere, BlueprintReadOnly, Categoy = "Movement", meta =(AllowPrivateAccess = true))
    bool bIsInAir;
    
    // OffsetYaw for Stafing
    UProperty(VisibleAnywhere, BlueprintReadOnly, Categoy = "Movement", meta =(AllowPrivateAccess = true))
    float MovementOffsetYaw;
    
    // OffsetYaw for the frame before we stop moving
    UProperty(VisibleAnywhere, BlueprintReadOnly, Categoy = "Movement", meta =(AllowPrivateAccess = true))
    float LastMovementOffsetYaw;
    
    UProperty(VisibleAnywhere, BlueprintReadOnly, Categoy = "Movement", meta =(AllowPrivateAccess = true))
    bool bAiming;
    
    // Yaw of the character this frame
    float CharacterYaw;
    
    // Yaw of character for previous frame
    float CharacterYawLastFrame;
    
    UPROPERTY(EditAnywhere, BlueprintReadOnly, Category = "Turn in place", meta = (AllowPrivateAccess = "true")) 
    float RootYawOffset;
     
     
     


              /** CPP File  **/
 
 
 
 #include "shooterAnimInstance.h"
 #include "GameFrameWork/CharacterMovementComponent.h"
 
 UShooterAnimInstance::UShooterAnimInstance():
 Speed(0.f), 
 bIsInAir(false), 
 bIsAccelerating(false), 
 MovementOffsetYaw(0.f), 
 LastMovementOffsetYaw(0.f),
 bAiming(false), 
 CharacterYaw(0.f), 
 CharacterYawLastFrame(0.f), 
 RootYawOffset(0.f)
 {
 
 }
 
 void UShootetAnimInstance::UpdateAnimationProperties(float DeltaTime)
 {
    if(ShooterCharacter == nullptr)
     {
       ShooterCharacter = cast<AShooterCharacter>(TryGetPawnOwner());
     }
   
   
    if(ShooterCharacter) 
    {
       /* get speed of the character from velocity */
       FVector Velocity {ShooterCharacter->GetVelocity()};
       Velocity.z = 0;
       Speed = Velocity.Size();
    
    
       /** is character in the air? */
       bIsInAir = ShooterCharacter->GetCharacterMovement->IsFalling();
    
    
    
       /** is character accelerating? */
       if(ShooterCharacter->GetCharacterMovement()->GetCurrentAcceleration().Size()>0.f) 
        {
           bIsAccelerating = true;
        }
       else
        {
           bIsAccelerating = false;
        }
        
        FRotator AimRotation = Shootercharacter->GetBaseAimRotation();
        
        FRotator MovementRotation = UKismetMathLibrary::MakeRotFromX(ShooterCharacter->GetVelocity()) ;
        
        MovemenoffsetYaw = UKismetMathLibrary::NormalizeDeltaRotator(
        MovementRotation, 
        AimRotation).Yaw;
        
        if(ShootetCharacter->GetVelocity.Size()>0.f) 
        {
         LastMovementoffsetYaw = MovementoffsetYaw;
        }
        bAiming = ShooterCharacter->GetAiming();
    }
    TurnInPlace();
 
 }

 
 void UShooterAnimInstance::NativeInitializeAnimation() 
 {
      ShooterCharacter = cast<AShooterCharacter>(TryGetPawnOwner());
 }
 
 void UShooterAnimInstance::TurnInPlace() 
 {
      if(ShooterCharacter == nullptr) return;
      
      if(Speed > 0) 
      {
          //Don't Turn In Place, Character is moving
          
      }
      else
      {  
          LastCharacterOffsetYaw = CharacterOffsetYaw;
          CharacterOffsetYaw = ShooterCharacter->GetActorRotation().Yaw;
          const float DeltaYaw {CharacterOffsetYaw - LastCharacterOffsetYaw};
          
          RootYawOffset -= DeltaYaw;
      }
 }
 
 
 



